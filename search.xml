<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cloudflare系列使用</title>
    <url>/2021/10/18/Hexo/Cloudflare%E7%B3%BB%E5%88%97%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>年少不知 Cloudflare 好，错把鹅云当做宝。</p>
<p>Cloudflare 是一家米国的跨国科技企业，提供CDN、优化工具、安全、分析以及应用等服务。Cloudflare 在 CDN 加速领域很有名气，提供免费和付费的加速服务和网站保护服务。Cloudflare 提供不同类型的套餐，即使是免费用户，Cloudflare 提供的功能也很全面。</p>
</blockquote>
<blockquote>
<p>本文主要介绍最近使用 Cloudflare 实现的一些功能，包括：DNS 管理、Cloudflare Pages、配置 Hexo 百度收录、Notion 个人域名访问。</p>
</blockquote>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/cloudflare%E7%B3%BB%E5%88%97%E4%BD%BF%E7%94%A8.svg"></p>
<span id="more"></span>
<h2 id="壹丨cloudflare-管理-dns">壹丨Cloudflare 管理 DNS</h2>
<blockquote>
<p>与阿里云解析功能类似，在 Cloudflare 中可以设置【使用 Cloudflare 代理流量】或【仅限 DNS 解析】</p>
</blockquote>
<p>Cloudflare 网址：https://www.cloudflare.com</p>
<p>记录类型介绍：</p>
<ul>
<li>CNAME 记录：别名记录，将域名解析到另外一个域名；</li>
<li>A 记录：指定主机名（或域名）对应的 IP 地址，即当访问此域名的时候，直接指向 IP 地址的主机；</li>
<li>TXT 记录：为某个主机名或域名设置说明，可以用来验证对域名的管理权；</li>
<li>MX 记录：邮件交换记录，一般用于将某个域名的电子邮件指向对应邮件服务器。</li>
</ul>
<h2 id="贰丨cloudflare-pages">贰丨Cloudflare Pages</h2>
<blockquote>
<p>Cloudflare Pages 是一个 JAMstack 平台，为前端开发人员提供协作和部署服务，支持 Hugo、JekyII、React、Vue、Gatsby 等框架。</p>
</blockquote>
<p>Cloudflare Pages 网址：https://pages.cloudflare.com</p>
<h4 id="项目创建">1. 项目创建：</h4>
<p>创建项目 —— 登录 Github —— 选择 git 仓库</p>
<h4 id="构建与部署">2. 构建与部署：</h4>
<blockquote>
<p>使用Hexo创建博客，执行 <code>hexo g</code> 命令时，将 <code>~/hexo-site/source/</code> 文件夹下 <code>.md</code>、<code>.html</code>、<code>.js</code> 等文件渲染，放入 <code>~/hexo-site/public/</code> 文件夹下，执行 <code>hexo deploy</code> 命令将 <code>~/hexo-site/public/</code> 文件夹下的内容推到 git 仓库。</p>
<p>即 Cloudflare Pages 从 Github 导入的文件就是生成网页的源文件，所以 —— <strong>构建参数不需要设置</strong></p>
</blockquote>
<p>构建配置：</p>
<ul>
<li>框架预设：None</li>
<li>构建命令：空</li>
<li>构建输出目录：空</li>
<li>根目录（高级）：空</li>
</ul>
<p>配置完后将自动部署……</p>
<h4 id="自定义域">3. 自定义域</h4>
<p>第一步，项目 —— 自定义域 —— 设置自定义域；</p>
<p>第二步，Cloudflare 中：DNS —— 添加记录 —— 设置 CNAME 记录。</p>
<h4 id="https">4. HTTPS</h4>
<p>使用 Cloudflare 代理可以直接开启强制 HTTPS，在 Cloudflare Pages 中是默认配置的。</p>
<h2 id="叁丨配置-hexo-百度收录">叁丨配置 Hexo 百度收录</h2>
<blockquote>
<p>试过很多次，都无法实现百度收录，据说百度无法从 Github 爬取内容。目前已经放弃百度收录，如果博客部署在 Coding、Gitee 等国内代码托管网站，可以试试以下步骤。</p>
</blockquote>
<p>百度搜索资源平台 - 快速收录网址：https://ziyuan.baidu.com/dailysubmit/index</p>
<p>第一步，用户中心 —— 站点管理 —— 添加网站；实践证明：填入 <code>https://www.mastermao.cn</code>，添加 CNAME 记录验证，是比较容易成功的；</p>
<p>第二步，sitemap 提交，个人 blog 使用 npm 安装相关插件、配置 <code>_config.yml</code> ，然后重新生成博客，在网页端提交即可；</p>
<p>第三步，设置自动提交，修改 <code>_config.yml</code> 配置，具体不再赘述，详见参考 [2]：</p>
<h2 id="肆丨notion-个人域名访问">肆丨Notion 个人域名访问</h2>
<blockquote>
<p>Notion 是一款电子笔记软件，堪称电子笔记界的天花板的存在。</p>
<p>Notion 不仅可以用来写电子笔记，还可以直接将电子笔记公开链接，生成个人网页；</p>
<p>Notion 目前并未提供自定义个人域名的功能，但可以使用 Cloudflare 手动配置。</p>
</blockquote>
<h4 id="notion-公开链接">1. Notion 公开链接</h4>
<p>第一步，设置喜好域名。Notion 中，Settings &amp; Members —— Settings —— Domain —— 填入喜好的字段，如填入 “mastermao” ，则公开链接的格式就是：<code>mastermao.notion.site/xxxxx</code>；</p>
<p>第二步，公开链接。转到公开页，右上角 Share —— Share to web，并可设置 Show link options，生成的公开链接盛出备用。</p>
<h4 id="创建规则-转发-url">2. 创建规则 —— 转发 URL</h4>
<p>Cloudflare 中，规则 —— 创建页面规则：</p>
<ul>
<li>如果 URL 匹配：填入想设置成的域名</li>
<li>则设置为：选择转发 URL、301 - 永久重定向、填入 Notion 公开链接</li>
<li>保存</li>
</ul>
<p>经过实测，可设置的域名限制比较宽松，子域名（ <code>notion.mastermao.cn</code>）、子页面（ <code>mastermao.cn/notion</code> ）都可以使用。</p>
<blockquote>
<p>错误示例：</p>
<p>博客导航栏的地址链接，以画廊为例，地址为：<code>mastermao.cn/gallery/</code>，当把 Notion 转发 URL 设置为 <code>mastermao.cn/notion/</code> 时，实践证明，生成的页面无法点击，无效。</p>
</blockquote>
<h4 id="hexo页面内引用">3. Hexo页面内引用</h4>
<p>使用一条 HTML 代码将自定义的 Notion 链接引用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://notion.mastermao.cn&quot;</span>&gt;</span>这是我的Notion<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>后续可以考虑换成图标等……</p>
<blockquote>
<p>做到这里突然发现，我做转发 URL 图啥呢？</p>
<p>针对直接使用顶级域名访问 Notion 是很便利的，除此之外可以设置子域名或子页面访问，或在页面中引用链接使用。</p>
</blockquote>
<h2 id="参考">参考</h2>
<blockquote>
<p>[1] 知乎，<span class="citation" data-cites="江湖人士">@江湖人士</span>，<a href="https://zhuanlan.zhihu.com/p/82909515">cloudflare使用入门教程，国外最好免费CDN</a></p>
<p>[2] 知乎，<span class="citation" data-cites="随风">@随风</span>，<a href="https://zhuanlan.zhihu.com/p/128033054">Hexo博客提交百度收录SEO</a></p>
<p>[3] 哔哩哔哩，@ VSeducation，<a href="https://www.bilibili.com/read/cv10994288">如何利用 Notion 搭建个人主页|博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Cloudflare</tag>
        <tag>Notion</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo多线部署</title>
    <url>/2021/10/18/Hexo/Hexo%E5%A4%9A%E7%BA%BF%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>网页托管服务很多，如 Github Pages、Gitee Pages、Coding 持续集成、Cloudflare Pages 等……</p>
<p>Coding、Gitee 为国内服务提供商，需要实名认证，其中 Coding 和鹅云联系密切，需要 <strong>超大量</strong> 的认证工作，没个三五天搞不完……</p>
<p>Cloudflare Pages、Github Pages 为国外服务提供商，相对而言访问速度较慢……</p>
</blockquote>
<blockquote>
<p>本文对比上述四种网页托管服务在 Hexo 部署中的操作流程，并给出一种双线部署方法。</p>
</blockquote>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/Hexo%E5%A4%9A%E7%BA%BF%E9%83%A8%E7%BD%B2.svg"></p>
<span id="more"></span>
<h2 id="壹丨网页托管服务部署对比">壹丨网页托管服务部署对比</h2>
<h4 id="coding-部署">Coding 部署</h4>
<p>操作流程如思维导图所示。部署过程很繁琐，需要配置鹅云权限、实名认证，且在添加自定义域名后，激活 SSL 证书时，还需要一顿认证操作……</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">优点</th>
<th style="text-align: center;">缺点</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">速度快<br>可被百度爬取<br>鹅云提供免费 SSL</td>
<td style="text-align: center;">需要认证的太多<br> 新建网站服务器需要选在香港<br>SSL 申请下来不会用<br>构建过程漫长</td>
</tr>
</tbody>
</table>
<p>神坑：</p>
<ul>
<li>新建网站服务器需要选在香港，否则：
<ul>
<li>域名需要备案</li>
<li>阿里云提供免费备案，但需要备案码：</li>
<li>买云服务器免费赠送备案码——
<ul>
<li>云服务器一年几千</li>
</ul></li>
<li>备案码可单独购买——
<ul>
<li>100一个</li>
</ul></li>
<li>尼玛……</li>
</ul></li>
<li>SSL 申请下来不会用：
<ul>
<li>关闭 Cloudflare 后，网站彻底不能打开；</li>
<li>阿里云可以上传证书——
<ul>
<li>使用时需要搭配云服务器
<ul>
<li>云服务器一年几千</li>
</ul></li>
</ul></li>
<li>尼玛……</li>
</ul></li>
</ul>
<h4 id="github-pages-部署">Github Pages 部署</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">优点</th>
<th style="text-align: center;">缺点</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">部署简单<br>构建速度快</td>
<td style="text-align: center;">访问速度慢<br>不能被百度收录</td>
</tr>
</tbody>
</table>
<h4 id="cloudflare-pages-部署">Cloudflare Pages 部署</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">优点</th>
<th style="text-align: center;">缺点</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">部署简单<br>部署&amp;自定义域名一条龙<br>速度还行</td>
<td style="text-align: center;">不能被百度收录</td>
</tr>
</tbody>
</table>
<h4 id="gitee-pages部署">Gitee Pages部署</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">优点</th>
<th style="text-align: center;">缺点</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">部署简单</td>
<td style="text-align: center;">需要上传整个仓库<br>部署后页面样式全丢</td>
</tr>
</tbody>
</table>
<h2 id="贰丨双线部署方法已放弃">贰丨双线部署方法（已放弃）</h2>
<blockquote>
<p>双线部署，就是国内 IP 访问国内源站，国外 IP 访问国外源站。</p>
</blockquote>
<p>以 Coding 和 Cloudflare Pages 为例：</p>
<p>第一步，各自部署并生成各自的网页链接；</p>
<p>第二步，在阿里云解析中设置 CNAME 记录，为 Coding 设置智能线路，为 Cloudflare Pages 设置为国外 IP 线路。</p>
<blockquote>
<p>由于不会使用鹅云的 SSL，导致生成的页面最终无法强制 HTTPS，搞了很久都没成功，故放弃。</p>
<p>Cloudflare 无法设置区分国内国外 IP 的 A 记录，但可设置屏蔽某些洲 / 国家 IP 的访问，毕竟——</p>
<p>——双线部署，图啥呢？（已设置屏蔽域外访问）</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 插入自定义网页</title>
    <url>/2021/10/18/Hexo/Hexo%E6%8F%92%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>页面内嵌套其他网页有很多方法，某实践中，使用自定义页面 + 跳过渲染 + iframe 标签引用的方法，本地部署显示正常，但部署到网站后显示不正常，对比网页源码发现，未知原因导致页面代码被修改，多次尝试无果……</p>
</blockquote>
<blockquote>
<p>本文介绍一种 Hexo 中插入自定义页面的方法：使用 Cloudflare Pages 部署自定义页面，在页面中添加 iframe 标签，实现页面嵌套。</p>
</blockquote>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/Hexo%E6%8F%92%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5.svg"></p>
<span id="more"></span>
<h4 id="本地调试自定义网页">1. 本地调试自定义网页</h4>
<p>将自定义页面的 CSS、JS、HTML文件放入合适位置，HTML 文件重命名为 <code>index.html</code>，本地调试</p>
<h4 id="上传-github">2. 上传 Github</h4>
<p>新建仓库 —— 文件拖拽上传</p>
<h4 id="cloudflare-pages-静态页面部署">3. Cloudflare Pages 静态页面部署</h4>
<p>参考博客下另一篇文章：<a href="/2021/10/18/Hexo/Cloudflare%E7%B3%BB%E5%88%97%E4%BD%BF%E7%94%A8/" title="Cloudflare系列使用">Cloudflare系列使用</a></p>
<p>部署方法与上述相同，构建参数设为空，生成的页面链接盛出备用</p>
<h4 id="hexo-使用-iframe-标签引用">4. Hexo 使用 iframe 标签引用</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">	<span class="selector-class">.iframe-body-sty</span>&#123;<span class="attribute">position</span>: relative;<span class="attribute">overflow</span>: hidden;<span class="attribute">height</span>:<span class="number">600px</span>;<span class="attribute">width</span>: <span class="number">1200px</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.iframe-body-sty</span>&gt;<span class="selector-id">#iframe-shrink</span>&#123;<span class="attribute">position</span>: relative;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">0.75</span>);<span class="attribute">top</span>:-<span class="number">15%</span>;<span class="attribute">left</span>: -<span class="number">12%</span>;&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;iframe-body-sty&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframe-shrink&quot;</span> <span class="attr">src</span>=<span class="string">&quot;---盛出备用的页面链接---&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1100px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;720px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="参考">参考</h4>
<blockquote>
<p>[1] CSDN，<span class="citation" data-cites="keep-go-on">@keep-go-on</span>，<a href="https://blog.csdn.net/qq_26462567/article/details/85252156/?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.no_search_link&amp;spm=1001.2101.3001.4242">前端实现 iframe 等比例缩放显示页面</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Cloudflare</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题启用PJAX（已解决插件失效问题）</title>
    <url>/2021/08/31/Hexo/Hexo%E5%90%AF%E7%94%A8Pjax/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>PJAX，即 PushState + Ajax，封装成一个 jQuery 扩展以方便使用。PJAX 主要用来解决 HTML 页面局部刷新 url 不更新和不支持后退和前进的问题，提升用户体验。NexT 主题集成了 PJAX 功能，理论上在主题配置文件中打开即可；但当页面添加了一些第三方插件时，局部刷新无法加载插件，导致插件失效。</p>
<p>本文主要介绍了 NexT 主题下启用 PJAX ，并实现切换界面音乐不停、豆瓣电影插件、相册插件正常工作等。</p>
</blockquote>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/NexT%E4%B8%BB%E9%A2%98%E5%90%AF%E7%94%A8PJAX.svg"></p>
<span id="more"></span>
<p><strong>当前环境：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm -v</span><br><span class="line">6.14.14</span><br><span class="line">$ hexo -v</span><br><span class="line">NexT version 8.7.0</span><br><span class="line">hexo: 5.4.0</span><br></pre></td></tr></table></figure>
<h2 id="壹丨什么是-pjax">壹丨什么是 PJAX？</h2>
<p>PJAX，即 PushState + Ajax，封装成一个 jQuery 扩展以方便使用。PJAX 主要用来解决 HTML 页面局部刷新 url 不更新和不支持后退和前进的问题，提升用户体验。</p>
<p>通俗来讲：</p>
<p>没有 PJAX 时：点击页面上的按钮，网页将清除当前显示页，载入指向页的全部内容，加之网络延迟等原因，会出现短暂的整幅网页为空白页；</p>
<p>开启 PJAX 时：点击页面上的按钮，指向页和当前页相同的元素，如导航栏、音乐播放器等不需要重新加载，而不同的局部页面内容将刷新并加载。</p>
<h2 id="贰丨next主题使用-pjax">贰丨NexT主题使用 PJAX</h2>
<p>Hexo 的 NexT 主题已经集成 PJAX：</p>
<p>修改 <code>~/hexo-site/_config.next.yml</code> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- pjax: </span><br><span class="line">+ pjax: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>仅仅在主题文件中启用 PJAX 局部刷新后，一些插件会失效，本博客失效的插件有：gallery 视图插件 <code>hexo-next-photos</code> 、豆瓣电影插件 <code>hexo-douban</code> 、音乐插件 <code>aplayer</code> 、<code>meting</code> 。</p>
<h2 id="叁丨解决插件失效问题">叁丨解决插件失效问题</h2>
<blockquote>
<p>原理：在添加插件的位置重新加载CSS、JS文件。</p>
</blockquote>
<h3 id="aplayermeting-音乐插件切换界面音乐不停">1. APlayer、Meting 音乐插件——切换界面音乐不停</h3>
<p>这类可以通过修改 HTML 代码导入 CSS、JS 文件：</p>
<p><strong>【侧边栏添加全局音乐播放插件】</strong></p>
<p>第一步，修改 <code>~/hexo-site/_config.next.yml</code> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">+ sidebar: <span class="built_in">source</span>/_data/sidebar.njk</span><br></pre></td></tr></table></figure>
<p>第二步，<code>~/hexo-site/source/_data/</code> 中，增加文件 <code>sidebar.njk</code> ，编辑如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- require APlayer --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- require MetingJS --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meting-js</span> <span class="attr">server</span>=<span class="string">&quot;netease&quot;</span> <span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span> <span class="attr">id</span>=<span class="string">&quot;6922083348&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;true&quot;</span> <span class="attr">order</span>=<span class="string">&quot;random&quot;</span> <span class="attr">list-folded</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>重点是添加以下头文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- require APlayer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- require MetingJS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中<code>meting</code> 的参数不再赘述。</p>
<p><strong>【post页面中添加播放器插件】</strong></p>
<p>和上述类似，页面中直接添加：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- require APlayer --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- require MetingJS --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meting-js</span> <span class="attr">server</span>=<span class="string">&quot;netease&quot;</span> <span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span> <span class="attr">id</span>=<span class="string">&quot;60198&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="画廊插件-hexo-next-photos">2. 画廊插件 <code>hexo-next-photos</code></h3>
<p>使用图床模式，插件将 <code>~/hexo-site/node_modules/hexo-next-photos/lib/figureBed.js</code> 生成 <code>photo.js</code> ，丢到 <code>~/hexo-site/public/js/</code> 下，插件原版有个错误，会导致画廊多个空格条，修改 <code>figureBed.js</code> ：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">- page: <span class="number">1</span>,</span><br><span class="line">+ page: <span class="number">0</span>,</span><br></pre></td></tr></table></figure>
<p>插件失效解决原理：检测到 <code>ImageGrid</code> 的类，就重新加载一次CSS、JS。</p>
<p>修改 <code>~/hexo-site/themes/next/source/js/pjax.js</code>，添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pjax = <span class="keyword">new</span> Pjax(&#123;....)&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//添加以下代码</span></span><br><span class="line"><span class="keyword">var</span> dynamicLoading = &#123;</span><br><span class="line">    <span class="attr">css</span>: <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(!path || path.length === <span class="number">0</span>)&#123;</span><br><span class="line">        	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;argument &quot;path&quot; is required !&#x27;</span>);</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    	<span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;link&#x27;</span>);</span><br><span class="line">    	link.href = path;</span><br><span class="line">    	link.rel = <span class="string">&#x27;stylesheet&#x27;</span>;</span><br><span class="line">    	link.type = <span class="string">&#x27;text/css&#x27;</span>;</span><br><span class="line">    	head.appendChild(link);</span><br><span class="line">	&#125;,</span><br><span class="line">    <span class="attr">js</span>: <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!path || path.length === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;argument &quot;path&quot; is required !&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">        script.src = path;</span><br><span class="line">        script.type = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">        head.appendChild(script);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后再添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;pjax:success&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">...</span><br><span class="line">NexT.utils.updateSidebarPosition();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加以下代码</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;ImageGrid&quot;</span>))&#123;</span><br><span class="line">	<span class="comment">//动态加载 CSS 文件</span></span><br><span class="line">	dynamicLoading.css(<span class="string">&quot;/css/gallery.css&quot;</span>);</span><br><span class="line">	<span class="comment">//动态加载 JS 文件</span></span><br><span class="line">	dynamicLoading.js(<span class="string">&quot;/js/photo.js&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="豆瓣电影插件-hexo-douban">3. 豆瓣电影插件 <code>hexo-douban</code></h3>
<p>根据以上思路，只要在 <code>pjax.js</code> 中添加进要加载的 CSS、JS 即可，当然最重要的是找到要追踪的类名。</p>
<p><strong>第一步</strong>，定位插件显示位置，位于 <code>&lt;div class="post-body animated fadeInDown"&gt;</code> 下：</p>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20210901004956477.png" alt style="zoom: 80%;"></p>
<p><strong>第二步</strong>，逐行分析：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span> <span class="comment">&lt;!--这是一开始的那个quote块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">style</span>&gt;</span> <span class="comment">&lt;!--这是样式（CSS）文件&gt;</span></span><br><span class="line"><span class="comment">&lt;div class=&quot;hexo-douban-tabs&quot;&gt; ... &lt;/div&gt; &lt;!--这是显示豆瓣电影 在看/想看/已看 的div标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!--这里放的是 首页/上一页/页码/下一页/尾页 的标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!--这里是JS文件--&gt;</span></span><br></pre></td></tr></table></figure>
<p>所以——把 <code>&lt;style&gt; ... &lt;/style&gt;</code> 内容保存为 <code>douban.styl</code> ，放在 <code>~/hexo-site/themes/next/source/css/</code> 下；把 <code>&lt;script&gt; ... &lt;/script&gt;</code> 保存为 <code>douban.js</code> ，放在 <code>~/hexo-site/themes/next/source/js/</code> 下；</p>
<p>因为——在执行 <code>hexo g</code> 的时候，<code>~/hexo-site/themes/next/source/css/</code> 和 <code>~/hexo-site/themes/next/source/js/</code> 两个文件夹中的文件会拷贝到 <code>~/hexo-site/public/css</code> 和 <code>~/hexo-site/public/js</code> 文件夹下。</p>
<p><strong>第三步</strong>，继续分析：</p>
<p>包含 <code>envent</code> 的 <code>&lt;a&gt; &lt;/a&gt;</code> 标签在分别存放在两个类下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hexo-douban-tabs&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hexo-douban-pagination&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20210901020608704.png" alt style="zoom:80%;"></p>
<p>所以——在 <code>~/hexo-site/themes/next/source/js/pjax.js</code> 中添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;hexo-douban-tabs&quot;</span>))&#123;</span><br><span class="line">    <span class="comment">//动态加载 CSS 文件</span></span><br><span class="line">    dynamicLoading.css(<span class="string">&quot;/css/douban.css&quot;</span>);</span><br><span class="line">    dynamicLoading.js(<span class="string">&quot;/js/douban.js&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;hexo-douban-pagination&quot;</span>))&#123;</span><br><span class="line">    <span class="comment">//动态加载 CSS 文件</span></span><br><span class="line">    dynamicLoading.css(<span class="string">&quot;/css/douban.css&quot;</span>);</span><br><span class="line">    dynamicLoading.js(<span class="string">&quot;/js/douban.js&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="肆丨结语">肆丨结语</h2>
<p>因为完全没学过前端的 HTML、JS、CSS 这些，所以起初被插件失效问题困扰很久很久。寻找解决办法的的过程是挺痛苦的：要不断地查资料、不断地尝试、不断地受挫、再不断地尝试……面对这些完全不懂的语法、元素，就像玩解谜游戏一样……</p>
<p>我相信我是幸运的，总能站在巨人的肩膀，找到很有用的参考，并最终解决问题；幸运不常有，但基数够大的话，总会有的。</p>
<h2 id="参考">参考</h2>
<blockquote>
<p>[1] FHB科学院，樊浩柏，<a href="https://www.fanhaobai.com/2017/07/pjax.html">PJAX原理和使用</a></p>
<p>[2] 米米的博客，张书樵，<a href="https://zhangshuqiao.org/2020-06/NexT适配PJAX的方案/">NexT 适配 PJAX 的方案</a></p>
<p>[3] 程序员甜品店，Jefsky，<a href="https://www.jefsky.com/archives/234.html">解决pjax加载页面导致js插件失效</a></p>
<p>[4] 木皆之森，Raoby，<a href="https://www.raobee.com/archives/254/">pjax无刷新加载后百度统计失效解决方案</a></p>
<p>[5] 小乐的博客，XiaoLe，<a href="https://www.xiaole88.com/post/55609.html">解决next主题开启pjax时使用hexo-blog-encrypt无效</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>PJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建个人博客(macOS下)</title>
    <url>/2021/06/24/Hexo/Hexo%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>老当益壮，宁移白首之心？穷且益坚，不坠青云之志。</p>
<p>本文主要介绍使用 Hexo 搭建个人笔记的全过程，系统为 macOS Big Sur 11.4</p>
</blockquote>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88macOS%E4%B8%8B%EF%BC%89.svg"></p>
<span id="more"></span>
<h2 id="壹丨环境配置">壹丨环境配置</h2>
<h4 id="安装-nodejs">1. 安装 NodeJS</h4>
<p>网址：https://nodejs.org/en/</p>
<h4 id="安装-hexo">2. 安装 Hexo</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h4 id="安装-hexo-deployer-git用于部署">3. 安装 <code>hexo-deployer-git</code>（用于部署）</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h4 id="安装-homebrew">4. 安装 homebrew</h4>
<p>镜像：http://mirrors.ustc.edu.cn/help/brew.git.html</p>
<h4 id="安装-git">5. 安装 git</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong><em>Tips</em></strong>：修复 “fatal: Could not resolve HEAD to a revision”：</p>
</blockquote>
<blockquote>
<p>执行 <code>brew update --verbose</code>，找到报错路径； 执行 <code>git fetch --prune origin</code>； 执行 <code>git pull --rebase origin master</code>。</p>
</blockquote>
<h2 id="贰丨新建博客">贰丨新建博客</h2>
<p>使用 NexT 主题：https://theme-next.js.org</p>
<h4 id="初始化">1. 初始化</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir hexo-site</span><br><span class="line">$ <span class="built_in">cd</span> hexo-site</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong><em>Tips</em></strong>：配置文件</p>
</blockquote>
<blockquote>
<p><code>~/hexo-site/_config.yml</code> 为博客网站配置文件 <code>~/hexo-site/themes/next/_config.yml</code> 为主题配置文件</p>
</blockquote>
<h4 id="安装-next">2. 安装 NexT</h4>
<blockquote>
<p>官方提供了 git 方法和 npm 方法，其中，npm 方法安装的主题文件位于 <code>~/hexo-site/node_modules/next</code> 下，后续配置主题文件及修改 CSS、JS 文件不方便，所以本文使用的 git 方法。</p>
</blockquote>
<p>安装主题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>升级主题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo-site</span><br><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure>
<h4 id="启用-next-主题">3. 启用 NexT 主题</h4>
<p>博客配置文件 <code>~/hexo-site/_config.yml</code></p>
<figure class="highlight bash"><figcaption><span>~/hexo-site/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">+ theme: next</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong><em>Tips</em></strong>：配置文件的键值中间有个空格</p>
</blockquote>
<h4 id="本地预览">4. 本地预览</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line">$ hexo clean</span><br><span class="line"><span class="comment"># 生成静态网页</span></span><br><span class="line">$ hexo g</span><br><span class="line"><span class="comment"># 本地预览</span></span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<p>打开默认端口 http://localhost:4000 即可预览博客</p>
<h2 id="叁丨github-部署">叁丨GitHub 部署</h2>
<h4 id="新建仓库">1. 新建仓库</h4>
<p>命名为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用户名.github.io</span><br></pre></td></tr></table></figure>
<h4 id="配置-ssh">2. 配置 SSH</h4>
<p>Terminal 执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>
<p>创建 SSH：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="github-中添加-ssh-key">3. GitHub 中添加 SSH key</h4>
<p>访达 —— 前往文件夹 —— .ssh，其中：</p>
<ul>
<li>id_rsa —— 私人秘钥</li>
<li>id_rsa.pub —— 公共秘钥</li>
</ul>
<p>GitHub 账户 setting 中，SSH keys —— New SSH key —— 将 id_rsa.pub 内容粘贴进去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试是否成功</span></span><br><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<h4 id="部署到-github">4. 部署到 GitHub</h4>
<p>修改博客配置文件 <code>~/hexo-site/_config.yml</code>：</p>
<figure class="highlight bash"><figcaption><span>~/hexo-site/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">+ deploy:</span><br><span class="line">+   <span class="built_in">type</span>: git</span><br><span class="line">+   repo: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">+   branch: master</span><br></pre></td></tr></table></figure>
<p>部署博客：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line">$ hexo clean</span><br><span class="line"><span class="comment"># 生成静态网页</span></span><br><span class="line">$ hexo g</span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>打开 <code>http://用户名.github.io</code> 即可看到博客。</p>
<h2 id="肆丨设置个人域名">肆丨设置个人域名</h2>
<h4 id="买个域名">1. 买个域名</h4>
<h4 id="阿里云设置">2.阿里云设置</h4>
<p>阿里云控制台 —— 域名 —— 解析</p>
<p>添加 A 记录：</p>
<ul>
<li>解析线路，默认</li>
<li><p>记录类型，A</p></li>
<li>主机记录，@</li>
<li><p>记录值，下述任选一即可</p></li>
</ul>
<p>使用 <a href="https://www.ipaddress.com/">IPAddress.com</a> 查找 <code>github.io</code> 的地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153 </span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure>
<p>添加 CNAME 记录：</p>
<ul>
<li>解析线路，默认</li>
<li>记录类型，CNAME</li>
<li>主机记录，www</li>
<li>记录值，用户名.github.io</li>
</ul>
<h4 id="本地配置">3. 本地配置</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/hexo-site/<span class="built_in">source</span></span><br><span class="line">$ touch CNAME</span><br><span class="line">$ nano CNAME</span><br><span class="line"><span class="comment"># 写入域名并保存</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong><em>Tips</em></strong>：或者执行下一步会自动添加 CNAME 文件</p>
</blockquote>
<h4 id="github-配置">4. GitHub 配置</h4>
<p>仓库 —— setting —— Custom domain —— 添加域名 —— 填入域名</p>
<h2 id="伍丨cloudflare-实现-https">伍丨Cloudflare 实现 HTTPS</h2>
<blockquote>
<p>HTTP 访问会被浏览器发红包，具体原因不再赘述。</p>
</blockquote>
<p>这里使用 Cloudflare 实现 HTTPS：</p>
<p>第一步，Cloudflare 注册： www.cloudflare.com；</p>
<p>第二步，获取 DNS 服务器地址：Add Site —— 添加域名 —— 扫描 DNS 记录 —— 分配两个 DNS —— 盛出备用；</p>
<p>第三步，替换阿里云默认 DNS 服务器：阿里云 —— 域名控制台 —— 域名 —— 管理 —— 基本信息 —— 修改 DNS —— 添加分配的两个 DNS 地址 —— 保存</p>
<h2 id="陆丨写作软件">陆丨写作软件</h2>
<h4 id="mweb推荐">1. MWeb（推荐）</h4>
<p>第一步，打开外部模式，command+E； 第二步，引入文件夹，引入 <code>~/hexo-site/source</code>； 第三步，source 右键编辑，“保存拖入的图片的文件夹名称”：<code>images</code>，“拖入的图片的保存位置”：<code>绝对位置</code>； 第四步，写作；</p>
<blockquote>
<p>MWeb是个优秀的软件，其提供的拼图功能在写作中非常实用。</p>
</blockquote>
<h4 id="typora强烈推荐">2. Typora（强烈推荐）</h4>
<blockquote>
<p>上述操作下图片保存在 <code>~/hexo-site/source/images</code> 下，不利于图片管理。</p>
</blockquote>
<p>应对方法：图片保存在文件同名文件夹下</p>
<h5 id="设置-post_asset_folder">1. 设置 <code>post_asset_folder</code></h5>
<p>修改<code>~/hexo-site/_config.yml</code>：</p>
<figure class="highlight bash"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">+ post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h5 id="安装-hexo-asset-image">2. 安装 <code>hexo-asset-image</code></h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/hexo-site</span><br><span class="line">$ npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<h5 id="配置-typora-图片保存路径">3. 配置 Typora 图片保存路径：</h5>
<p>文件 —— 偏好设置 —— 图像 —— 插入图片时...</p>
<ul>
<li>复制到指定路径</li>
<li><code>./$&#123;filename&#125;</code></li>
<li>勾选 - 对本地位置的图片应用上述规则</li>
<li>勾选 - 对网络位置的图片应用上述规则</li>
<li>勾选 - 优先使用相对路径</li>
</ul>
<blockquote>
<p>本地保存图片的方法比较占空间，可以换用图床方式插入图片。</p>
</blockquote>
<h2 id="柒丨常用语法">柒丨常用语法</h2>
<h4 id="front-matter">1. Front-matter</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021</span><span class="string">/6/24</span> <span class="number">21</span><span class="string">:28:25</span></span><br><span class="line"><span class="attr">updated:</span> <span class="number">2021</span><span class="string">/6/25</span> <span class="number">21</span><span class="string">:28:25</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span> <span class="string">(开启评论)</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">(标签)</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">标签1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">标签2</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">(分类)</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">类名</span></span><br></pre></td></tr></table></figure>
<h4 id="引用块">2. 引用块</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<h4 id="代码块">3. 代码块</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">参数</th>
<th style="text-align: center;">值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">line_number</td>
<td style="text-align: center;">true</td>
</tr>
<tr class="even">
<td style="text-align: center;">highlight</td>
<td style="text-align: center;">true</td>
</tr>
<tr class="odd">
<td style="text-align: center;">first_line</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: center;">mark</td>
<td style="text-align: center;">特定行高亮</td>
</tr>
<tr class="odd">
<td style="text-align: center;">wrap</td>
<td style="text-align: center;">true</td>
</tr>
</tbody>
</table>
<h2 id="参考">参考</h2>
<blockquote>
<p>[1] CSDN，<span class="citation" data-cites="HongtaiWolf">@HongtaiWolf</span>，<a href="https://blog.csdn.net/D516701881/article/details/107421940">Mac下使用Homebrew安装nginx报错</a></p>
<p>[2] 知乎，<span class="citation" data-cites="seay">@seay</span>，<a href="https://zhuanlan.zhihu.com/p/22405775">手把手教从零开始在GitHub上使用Hexo搭建博客教程(一)-附GitHub注册及配置</a></p>
<p>[3] CSDN，<span class="citation" data-cites="yucicheung">@yucicheung</span>，<a href="https://blog.csdn.net/yucicheung/article/details/79560027">为GitHub Page绑定自定义域名并实现HTTPS访问</a></p>
<p>[4] 知乎，<span class="citation" data-cites="Momo">@Momo</span>，<a href="https://zhuanlan.zhihu.com/p/30513914">MWeb配合Hexo高效管理博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>macOS</tag>
        <tag>nodejs</tag>
        <tag>GitHub</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo制作个人画廊</title>
    <url>/2021/07/12/Hexo/Hexo%E7%9B%B8%E5%86%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>需求：为导航栏添加画廊</p>
<p>需解决问题：</p>
<ul>
<li>图片图床保存</li>
<li>图片加载速度快</li>
<li>图片体积小</li>
</ul>
</blockquote>
<blockquote>
<p>本文使用腾讯云 COS 作为图床，使用 PicGo 软件上传，在 Hexo 中使用插件制作画廊，使用Python脚本将原图压缩为Webp格式。</p>
</blockquote>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/Hexo%E5%88%B6%E4%BD%9C%E4%B8%AA%E4%BA%BA%E7%94%BB%E5%BB%8A.svg"></p>
<span id="more"></span>
<h2 id="壹丨腾讯云-cos-图床">壹丨腾讯云 COS 图床</h2>
<p>菜单 —— 产品 —— 存储 —— 对象存储 —— 立即使用</p>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-220210712014521149.png"></p>
<p>存储桶列表 —— 创建存储桶 —— 访问权限设置为：公有读私有写</p>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20210712014719701.png" alt style="zoom:50%;"></p>
<h2 id="贰丨使用图床">贰丨使用图床</h2>
<p>在存储桶列表 —— 选择存储桶 —— 概览中，可以看到：</p>
<ul>
<li>存储桶名称</li>
<li>所属地域</li>
</ul>
<p>在账户 —— 访问管理 —— 访问秘钥 —— API 秘钥管理 —— 新建秘钥，可以看到：</p>
<ul>
<li>APPID</li>
<li>SecretId</li>
<li>SecretKey</li>
</ul>
<h4 id="使用客户端">【使用客户端】</h4>
<p>下载客户端：https://console.cloud.tencent.com/cos5/cosbrowser</p>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20210712015109637.png"></p>
<h4 id="picgo">【PicGo】</h4>
<p>下载客户端：https://github.com/Molunerfinn/PicGo/releases</p>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20210712020004500.png"></p>
<h2 id="叁丨typora-图床设置">叁丨Typora 图床设置</h2>
<p>第一步，配置好 PicGo</p>
<p>第二步，Typora 中，文件——偏好设置——图像：</p>
<ul>
<li>插入图片时：上传图片</li>
<li>上传服务：PicGo(app)</li>
<li>设置 PicGo 路径</li>
<li>验证图片上传选项</li>
</ul>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20210712020701584.png"></p>
<h2 id="肆丨hexo-画廊展示">肆丨Hexo 画廊展示</h2>
<p>使用 Hexo 插件 <code>hexo-next-photos</code></p>
<h4 id="安装插件">1. 安装插件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/hexo-site</span><br><span class="line">$ npm install hexo-next-photos --save</span><br></pre></td></tr></table></figure>
<h4 id="修改主题配置文件">2. 修改主题配置文件</h4>
<p>第一步，将 <code>~/hexo-site/themes/next/_config.yml</code> 复制到 <code>~/hexo-site/</code>，重命名为 <code>_config.next.yml</code></p>
<blockquote>
<p>PS：关于这三个文件，测试发现它们的优先级：<code>~/hexo-site/themes/next/_config.yml</code> &gt; <code>~/hexo-site/_config.next.yml</code>（用在新建导航栏调整顺序的时候）</p>
</blockquote>
<p>第二步，新建文件夹 <code>~/hexo-site/source/_data</code>，新建文件 <code>body-end.njk</code>、<code>body-end.swig</code>、<code>styles.styl</code></p>
<p>第三步，新建页 <code>hexo new page gallery</code>，修改 <code>/source/gallery/index.md</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: gallery</span><br><span class="line">type: photos</span><br><span class="line">---</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ImageGrid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第四步，修改 <code>~/hexo-site/_config.yml</code>，推荐使用图床模式，添加内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-next-photos</span></span><br><span class="line"><span class="attr">hexo_next_photos:</span></span><br><span class="line">  <span class="attr">modes:</span> <span class="string">figureBed</span> </span><br><span class="line">  <span class="attr">pictureUrl:</span> </span><br><span class="line">  <span class="attr">pictureDirPath:</span> <span class="string">source/gallery/PhotoDir</span></span><br></pre></td></tr></table></figure>
<p>第五步，修改 <code>~/hexo-site/themes/next/_config.next.yml</code>，如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line"><span class="bullet">-</span>  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line"><span class="string">+</span>  <span class="attr">bodyEnd:</span> <span class="string">source/_data/body-end.njk</span></span><br><span class="line"><span class="bullet">-</span>  <span class="comment">#style: source/_data/styles.styl</span></span><br><span class="line"><span class="string">+</span>  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Third Party Plugins &amp; Services Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.org/docs/third-party-services/</span></span><br><span class="line"><span class="comment"># You may need to install dependencies or set CDN URLs in `vendors`</span></span><br><span class="line"><span class="comment"># There are two different CDN providers by default:</span></span><br><span class="line"><span class="comment">#   - jsDelivr (cdn.jsdelivr.net), works everywhere even in China</span></span><br><span class="line"><span class="comment">#   - CDNJS (cdnjs.cloudflare.com), provided by cloudflare</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="bullet">-</span> <span class="comment">#fancybox: false</span></span><br><span class="line"><span class="string">+</span> <span class="attr">fancybox:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="comment">#lazyload: false</span></span><br><span class="line"><span class="string">+</span> <span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="comment"># FancyBox</span></span><br><span class="line">  <span class="comment"># jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js</span></span><br><span class="line">  <span class="comment"># fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js</span></span><br><span class="line">  <span class="comment"># fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css</span></span><br><span class="line">  <span class="attr">jquery:</span></span><br><span class="line">  <span class="attr">fancybox:</span>  <span class="comment"># choose a faster CDN</span></span><br><span class="line">  <span class="attr">fancybox_css:</span> <span class="comment"># choose a faster CDN</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Lazyload</span></span><br><span class="line">  <span class="comment"># lazyload: //cdn.jsdelivr.net/npm/lozad@1/dist/lozad.min.js</span></span><br><span class="line">  <span class="comment"># lazyload: //cdnjs.cloudflare.com/ajax/libs/lozad.js/1.9.0/lozad.min.js</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="comment"># choose a faster CDN</span></span><br></pre></td></tr></table></figure>
<p>增加菜单栏：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="string">+</span> <span class="attr">gallery:</span> <span class="string">/gallery/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-camera</span></span><br></pre></td></tr></table></figure>
<p>插件源程序存在错误，会导致第一张图片不显示，修改 <code>~/hexo-site/node_modules/hexo-next-photos/lib/figureBed.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">-  page: <span class="number">1</span></span><br><span class="line">+  page: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h4 id="添加图片">3. 添加图片</h4>
<p>将保存在图床的图片地址拷贝到 <code>source/gallery/PhotoDir/linkList.txt</code>，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://s1.ax1x.com/2020/05/21/YbueyT.jpg</span><br><span class="line">https://s1.ax1x.com/2020/05/21/YbuZlV.jpg</span><br><span class="line">https://s1.ax1x.com/2020/05/21/YbuVS0.jpg</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<blockquote>
<p>hexo-next-photos作者博客：https://jygzyc.github.io/photos</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Typora</tag>
        <tag>腾讯云COS</tag>
        <tag>PicGo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo美化</title>
    <url>/2021/08/20/Hexo/Hexo%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>针对NexT主题的进一步美化，包括：设置背景图片、博客文本透明化、设置圆角、添加音乐播放插件等。</p>
</blockquote>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/Hexo%E7%BE%8E%E5%8C%96.svg"></p>
<span id="more"></span>
<h2 id="壹丨设置主题">壹丨设置主题</h2>
<h4 id="设置背景图片">1. 设置背景图片</h4>
<ul>
<li>将背景图片放入 <code>~/hexo-site/themes/next/source/images/</code></li>
<li>修改 <code>~/hexo-site/_config.next.yml</code> ：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+ custom_file_path:</span><br><span class="line">+   style: <span class="built_in">source</span>/_data/styles.styl</span><br></pre></td></tr></table></figure>
<ul>
<li>新建或修改 <code>~/hexo-site/source/_data/styles.styl</code>，添加：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置背景图片</span></span><br><span class="line">body &#123;</span><br><span class="line">    <span class="attr">background</span>: url(<span class="regexp">/images/</span>background.jpg);</span><br><span class="line">    background-repeat: repeat-x;</span><br><span class="line">    background-attachment: fixed; <span class="comment">//不重复</span></span><br><span class="line">    background-size: cover;      <span class="comment">//填充</span></span><br><span class="line">    background-position: <span class="number">100</span>% <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="博客文本透明化">2. 博客文本透明化</h4>
<p>打开 <code>~/hexo-site/source/_data/styles.styl</code>，添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 博客内容透明化</span></span><br><span class="line"><span class="comment">//文章内容的透明度设置</span></span><br><span class="line">.post-block &#123;</span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//侧边框的透明度设置</span></span><br><span class="line">.sidebar &#123;</span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单栏的透明度设置</span></span><br><span class="line">.header-inner &#123;</span><br><span class="line">  <span class="attr">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.85</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//搜索框（local-search）的透明度设置</span></span><br><span class="line">.popup &#123;</span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="设置界面圆角">3. 设置界面圆角</h4>
<ul>
<li>修改 <code>~/hexo-site/_config.next.yml</code> ：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+ custom_file_path:</span><br><span class="line">+   variable: <span class="built_in">source</span>/_data/variables.styl</span><br></pre></td></tr></table></figure>
<ul>
<li>新建或修改 <code>~/hexo-site/source/_data/variables.styl</code>，添加：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 圆角设置</span></span><br><span class="line">$border-radius-inner     = 12px 12px 12px 12px;</span><br><span class="line">$border-radius           = 12px;</span><br></pre></td></tr></table></figure>
<h2 id="贰丨音乐播放">贰丨音乐播放</h2>
<h4 id="网易云音乐外链播放">1. 网易云音乐外链播放</h4>
<ul>
<li>网页版 —— 生成外链播放器</li>
<li>直接粘贴到页面</li>
</ul>
<h4 id="使用-hexo-tag-aplayer-插件">2. 使用 <code>Hexo-Tag-APlayer</code> 插件</h4>
<p>APlayer 官网：<a href="https://aplayer.js.org/#/">APlayer</a></p>
<p><code>Hexo-Tag-APlayer</code> 项目开源地址：<a href="https://github.com/MoePlayer/hexo-tag-aplayer">Hexo-Tag-APlayer</a></p>
<p>第一步，安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure>
<p>第二步，启用 <code>MetingJS</code>：</p>
<ul>
<li>修改 <code>~/hexo-site/_config.yml</code>，添加：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+ aplayer:</span><br><span class="line">+   meting: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>第三步，添加音乐：</p>
<ul>
<li>在网易云音乐中找到歌曲 <code>id</code>，歌曲id=31192230为例，markdown文件中添加：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% meting &quot;3986040&quot; &quot;netease&quot; &quot;song&quot; &quot;theme:#555&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>歌单id=6922083348为例，添加：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% meting &quot;6922083348&quot; &quot;netease&quot; &quot;playlist&quot; &quot;theme:#555&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;</span><br></pre></td></tr></table></figure>
<p>参数表</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">选项</th>
<th style="text-align: center;">默认值</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">id</td>
<td style="text-align: center;"><strong>必须值</strong></td>
<td style="text-align: center;">歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td>
</tr>
<tr class="even">
<td style="text-align: center;">server</td>
<td style="text-align: center;"><strong>必须值</strong></td>
<td style="text-align: center;">音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">type</td>
<td style="text-align: center;"><strong>必须值</strong></td>
<td style="text-align: center;"><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">fixed</td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;">开启固定模式</td>
</tr>
<tr class="odd">
<td style="text-align: center;">mini</td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;">开启迷你模式</td>
</tr>
<tr class="even">
<td style="text-align: center;">loop</td>
<td style="text-align: center;"><code>all</code></td>
<td style="text-align: center;">列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">order</td>
<td style="text-align: center;"><code>list</code></td>
<td style="text-align: center;">列表播放模式： <code>list</code>, <code>random</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">volume</td>
<td style="text-align: center;">0.7</td>
<td style="text-align: center;">播放器音量</td>
</tr>
<tr class="odd">
<td style="text-align: center;">lrctype</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">歌词格式类型</td>
</tr>
<tr class="even">
<td style="text-align: center;">listfolded</td>
<td style="text-align: center;"><code>false</code></td>
<td style="text-align: center;">指定音乐播放列表是否折叠</td>
</tr>
<tr class="odd">
<td style="text-align: center;">storagename</td>
<td style="text-align: center;"><code>metingjs</code></td>
<td style="text-align: center;">LocalStorage 中存储播放器设定的键名</td>
</tr>
<tr class="even">
<td style="text-align: center;">autoplay</td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;">自动播放，移动端浏览器暂时不支持此功能</td>
</tr>
<tr class="odd">
<td style="text-align: center;">mutex</td>
<td style="text-align: center;"><code>true</code></td>
<td style="text-align: center;">该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td>
</tr>
<tr class="even">
<td style="text-align: center;">listmaxheight</td>
<td style="text-align: center;"><code>340px</code></td>
<td style="text-align: center;">播放列表的最大长度</td>
</tr>
<tr class="odd">
<td style="text-align: center;">preload</td>
<td style="text-align: center;"><code>auto</code></td>
<td style="text-align: center;">音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">theme</td>
<td style="text-align: center;"><code>#ad7a86</code></td>
<td style="text-align: center;">播放器风格色彩设置</td>
</tr>
</tbody>
</table>
<h2 id="参考">参考</h2>
<blockquote>
<p>[1] CSDN，<span class="citation" data-cites="hushhw">@hushhw</span>，<a href="https://blog.csdn.net/hushhw/article/details/88092728">Hexo 主题插入音乐之 aplayer 音乐播放器</a></p>
<p>[2] Github，<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">hexo-tag-aplayer 中文文档</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下Hexo环境配置</title>
    <url>/2021/06/26/Hexo/Windows%E4%B8%8BHexo%E5%86%99%E4%BD%9C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>Windows 10 系统可拓展 Linux 子系统功能（WSL），可以通过软件商店安装 Linux 系统，如 Ubuntu、CentOS 等，搭配新版Windows Terminal，黑苹果不香了……</p>
</blockquote>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/Windows%E4%B8%8BHexo%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.svg" alt></p>
<span id="more"></span>
<h2 id="壹丨windows-安装-linux-子系统">壹丨Windows 安装 Linux 子系统</h2>
<h4 id="安装应用">1. 安装应用</h4>
<ul>
<li>Windows 下：设置 —— 应用 —— 应用和功能 —— 程序或功能 —— 启用或关闭 Windows 功能 —— 勾选“适用于 Linux 的 Windows 子系统” —— 重启</li>
</ul>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20210626183417980.png" alt style="zoom: 33%;"></p>
<ul>
<li>Windows 下：Microsoft Store —— 安装 Ubuntu 20.04 LTS</li>
</ul>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20210626183718148.png" alt style="zoom: 33%;"></p>
<ul>
<li>Windows 下：Microsoft Store —— 安装 Windows Terminal</li>
</ul>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20210626183628209.png" alt style="zoom:33%;"></p>
<h4 id="启动-ubuntu-20.04-lts">2. 启动 Ubuntu 20.04 LTS，</h4>
<ul>
<li>完成系统安装</li>
<li>设置用户名和密码</li>
<li>后续使用 Windows Terminal 作为终端</li>
</ul>
<h4 id="修改清华镜像源">3. 修改清华镜像源</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>使用 <code>#</code> 注释掉原来的镜像，添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>
<h4 id="wsl-相关说明">4. WSL 相关说明</h4>
<p>打开 Terminal 时，显示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mastermao@MasterMao:/mnt/c/Users/MasterMao$</span><br></pre></td></tr></table></figure>
<p>在 Windows 中，当前文件夹是用户文件夹；在 Ubuntu 下，C 盘挂载到 <code>/mnt/c</code>；Ubuntu 和 Windows 的用户目录是不同的。</p>
<p>Ubuntu 根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>
<p>配置 Github 或 Coding 的 SSH key 时，正确的目录应该是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure>
<p>而不是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mastermao@MasterMao:/mnt/c/Users/MasterMao$ <span class="built_in">cd</span> .ssh</span><br></pre></td></tr></table></figure>
<h2 id="贰丨安装-hexo">贰丨安装 Hexo</h2>
<h4 id="安装-nodejs">1. 安装 Nodejs</h4>
<p>打开 <a href="https://nodejs.org/en/">Nodejs官网</a>，查看最新版本，<code>14.17.1 LTS</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -</span><br><span class="line">$ sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>
<h4 id="安装-hexo">2. 安装 Hexo</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h4 id="安装-deployer">3. 安装 Deployer</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h2 id="叁丨git-设置">叁丨Git 设置</h2>
<h4 id="查看版本">1. 查看版本</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure>
<h4 id="本地-git-配置">2. 本地 git 配置</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="github-中添加-ssh-key">3. Github 中添加 SSH key</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>Github 账户 setting 中，SSH keys —— New SSH key —— 将 id_rsa.pub 内容粘贴进去</p>
<h4 id="测试连接">4. 测试连接</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<h2 id="肆丨使用-typora-创作博客">肆丨使用 Typora 创作博客</h2>
<h4 id="使用本地图片">【使用本地图片】</h4>
<h5 id="设置-post_asset_folder">1. 设置 <code>post_asset_folder</code></h5>
<figure class="highlight bash"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h5 id="安装-hexo-asset-image">2. 安装 <code>hexo-asset-image</code></h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/hexo-site</span><br><span class="line">$ npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<h5 id="配置-typora-图片保存路径">3. 配置 Typora 图片保存路径：</h5>
<p>文件 —— 偏好设置 —— 图像 —— 插入图片时...</p>
<ul>
<li>复制到指定路径</li>
<li><code>./$&#123;filename&#125;</code></li>
<li>勾选 - 对本地位置的图片应用上述规则</li>
<li>勾选 - 对网络位置的图片应用上述规则</li>
<li>勾选 - 优先使用相对路径</li>
</ul>
<h4 id="使用图床">【使用图床】</h4>
<h5 id="下载-picgo">1. 下载 PicGo</h5>
<p>PicGo 开源地址：https://github.com/Molunerfinn/PicGo/releases</p>
<h5 id="设置自动上传">2. 设置自动上传</h5>
<p>偏好设置 —— 图像：</p>
<ul>
<li>插入图片时 —— 上传图片</li>
<li>勾选对本地位置的图片应用上述规则</li>
<li>勾选对网络位置的图片应用上述规则</li>
<li>上传服务 —— PicGo(app)</li>
<li>PicGo 路径 —— 填入软件路径</li>
</ul>
<h5 id="验证图片上传选项">3. 验证图片上传选项</h5>
<h2 id="伍丨windows-terminal-美化">伍丨Windows Terminal 美化</h2>
<blockquote>
<p>Windows Terminal 与 Windows 10 自带命令提示符界面相比美观了很多，不过仍可进一步定制。</p>
</blockquote>
<p>标签栏下三角 —— 设置：</p>
<ul>
<li>启动：
<ul>
<li>默认配置文件：Ubuntu</li>
</ul></li>
</ul>
<p>配置文件 —— Ubuntu：</p>
<ul>
<li>常规：
<ul>
<li>名称：Ubuntu</li>
<li>图标：...</li>
<li>选项卡标题：Ubuntu</li>
</ul></li>
<li>外观：
<ul>
<li>文本配色方案：Tango Dark</li>
<li>字体：Monaco</li>
<li>字号：13</li>
<li>光标形状：下划线</li>
<li>背景图像：...</li>
<li>背景图像不透明度：50%</li>
<li>文本格式化：亮色</li>
<li>亚克力效果：开</li>
<li>Acrylic 不透明度：70%</li>
<li>滚动条可见性：隐藏</li>
</ul></li>
</ul>
<p>预览：</p>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20211024065230434.png" alt style="zoom: 80%;"></p>
<h2 id="参考">参考</h2>
<blockquote>
<p>Ubuntu | 镜像站使用帮助，<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华大学开源软件镜像站</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Typora</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5开发环境配置</title>
    <url>/2021/06/29/PyQt5/PyQt5%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>PyQt5开发环境配置</p>
<span id="more"></span>
<h2 id="环境">1. 环境</h2>
<ul>
<li>包管理器：Anaconda3</li>
<li><p>IDE：PyCharm</p></li>
<li><p>PyQt5模块：</p></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ pip install pyqt5</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">$ pip uninstall pyqt5</span><br></pre></td></tr></table></figure>
<h2 id="qtdesigner-pyuic">2. QtDesigner &amp; PyUIC</h2>
<ul>
<li>QtDesigner，可视化UI编辑器</li>
<li>PyUIC，将.ui文件转化为.py文件，以供Python主程序调用。</li>
</ul>
<h3 id="windows下">Windows下：</h3>
<p>PyCharm——Preferences——Tools——External Tools——加号</p>
<h4 id="qtdesigner">1. QtDesigner：</h4>
<ul>
<li>Name：<code>QtDesigner</code></li>
<li>Program：<code>C:\ProgramData\&#123;Anaconda安装路径&#125;\Library\bin\designer.exe</code></li>
<li>Working directory：<code>$FileDir$</code></li>
</ul>
<h3 id="pyuic">2. PyUIC：</h3>
<ul>
<li>Name：<code>PyUIC</code></li>
<li>Program：<code>C:\ProgramData\&#123;Anaconda安装路径&#125;&#125;\python.exe</code></li>
<li>Arguments：<code>-m PyQt5.uic.pyuic $FileName$ -o $FileNameWithoutExtension$.py</code></li>
<li>Working directory：<code>$FileDir$</code></li>
</ul>
<h3 id="macos下">MacOS下：</h3>
<p>PyCharm——Preferences——Tools——External Tools——加号</p>
<h4 id="qtdesigner-1">1. QtDesigner：</h4>
<ul>
<li>Name：<code>QtDesigner</code></li>
<li>Program：<code>/Users/用户名/opt/anaconda3/bin/Designer.app</code></li>
<li>Working directory：<code>$FileDir$</code></li>
</ul>
<h4 id="pyuic-1">2. PyUIC</h4>
<ul>
<li>Name：<code>PyUIC</code></li>
<li>Program：<code>/Users/用户名/opt/anaconda3/bin/python.app</code></li>
<li>Arguments：<code>-m PyQt5.uic.pyuic $FileName$ -o $FileNameWithoutExtension$.py</code></li>
<li>Working directory：<code>$FileDir$</code></li>
</ul>
<h2 id="logo_rc报错问题">3. logo_rc报错问题</h2>
<p>【问题描述】界面中添加logo，使用PyUIC转换后，以下语句报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logo_rc</span><br></pre></td></tr></table></figure>
<p>【解决方法】将<code>xx.qrc</code>文件转换为<code>.py</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyrcc5 xx.qrc -o xx_rc.py</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PyQt</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Windows</tag>
        <tag>PyQt</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5控件及用法</title>
    <url>/2021/06/29/PyQt5/PyQt5%E6%8E%A7%E4%BB%B6%E5%8F%8A%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="待整理...">待整理...</h2>
<span id="more"></span>
<h3 id="ui使用方法">UI使用方法</h3>
<p>https://my.oschina.net/u/4322686/blog/3448663</p>
<h3 id="combobox">comboBox</h3>
<p>currentText()获得文本</p>
<p>currentIndex()获得下标</p>
<p>self.comboBox.currentIndexChanged.connect() comboBox的事件选中函数</p>
<h3 id="qlineedittextedit">QlineEdit、textEdit</h3>
<h3 id="qcheckbox">QCheckBox</h3>
<p>https://www.jb51.net/article/181600.htm</p>
<h3 id="qchart">Qchart</h3>
<p>https://blog.csdn.net/u011218356/article/details/88957823</p>
]]></content>
      <categories>
        <category>PyQt</category>
      </categories>
      <tags>
        <tag>PyQt</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5扩展库</title>
    <url>/2021/06/29/PyQt5/PyQt5%E6%89%A9%E5%B1%95%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="待更新...">待更新...</h2>
<span id="more"></span>
<h2 id="qchart库">QChart库</h2>
<h3 id="安装">安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install PyQtChart</span><br></pre></td></tr></table></figure>
<h3 id="使用">使用</h3>
<p>https://blog.csdn.net/u011218356/article/details/88957823</p>
]]></content>
      <categories>
        <category>PyQt</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Windows</tag>
        <tag>PyQt</tag>
      </tags>
  </entry>
  <entry>
    <title>MXNet+Gluoncv环境搭建</title>
    <url>/2021/06/29/PyQt5/MXNet-Gluoncv%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MXNet+Gluoncv环境搭建</p>
<span id="more"></span>
<h2 id="linux下">Linux下</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MXNet+Gluoncv+CUDA10.0</span></span><br><span class="line">$ pip install --upgrade mxnet-cu100mkl gluoncv -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure>
<h2 id="macos下">macOS下</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MxNet+Gluoncv</span></span><br><span class="line">$ pip install --upgrade mxnet gluoncv -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装OpenCV-headless（解决Gluoncv中与PyQt5中OpenCV冲突）</span></span><br><span class="line">$ pip install opencv-contrib-python-headless -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure>
<h2 id="windows下对cuda版本要求严格">Windows下（对CUDA版本要求严格）</h2>
<h3 id="安装前须知">安装前须知</h3>
<ul>
<li><p>CUDA版本一定为：<code>CUDA 10.1</code></p></li>
<li><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb1-1" title="1">$ <span class="ex">nvcc</span> --version</a></code></pre></div></li>
<li>cuDNN版本一定对应 <code>CUDA 10.1</code></li>
<li>安装MXNet版本一定为 1.5.0`</li>
<li><p>Anaconda新建环境，选择 <code>Python 3.6</code></p></li>
</ul>
<h3 id="安装步骤">安装步骤</h3>
<ul>
<li>安装<code>Microsoft Visual Studio</code></li>
<li>安装<code>NVIDIA CUDA-Toolkit</code>，选择<code>10.1</code> 版本，环境变量添加<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1</code></li>
<li>下载<code>NVIDIA cuDNN</code>，解压到<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\</code></li>
<li>Anaconda新建环境，选择<code>Python 3.6</code></li>
<li>安装MXNet</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install mxnet-cu101==1.5.0</span><br></pre></td></tr></table></figure>
<h3 id="安装中可能出现的问题">安装中可能出现的问题</h3>
<p><strong>出现 OSError: [WinError 126] 找不到指定的模块：</strong></p>
<ul>
<li>安装微软运行库</li>
</ul>
<p><strong>libmxnet.dll was not found：</strong></p>
<ul>
<li>创建Python3.6环境，重新<code>pip install mxnet-cu101==1.5.0</code></li>
</ul>
<h2 id="参考">【参考】</h2>
<p>[1] https://zhuanlan.zhihu.com/p/91554516</p>
<p>[2] https://blog.csdn.net/huanghe_zhiyuan/article/details/108298193</p>
]]></content>
      <categories>
        <category>MXNet</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Windows</tag>
        <tag>MXNet</tag>
        <tag>Gluoncv</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>视频处理中的延迟问题</title>
    <url>/2021/06/29/PyQt5/%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E4%B8%AD%E7%9A%84%E5%BB%B6%E8%BF%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>OpenCV在摄像机每次获取新帧时，总是先把上一次读取的帧拿出来先用，再把新帧加入缓存，所以要想获取最新的帧，一定要连续读两次才能读到最新帧。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag, image = self.cap.read()</span><br><span class="line">flag, image = self.cap.read()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PyQt</category>
      </categories>
      <tags>
        <tag>PyQt</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>PPT 设置图片透明背景</title>
    <url>/2021/11/03/PPT%E4%BD%BF%E7%94%A8/PPT%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E9%80%8F%E6%98%8E%E8%83%8C%E6%99%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>做 PPT 使用现成的模板添加内容，经常遇到在添加图片的时候，图片有背景颜色， PPT 模板的背景可能是白色，可能是其他浅颜色，总之很不好看。</p>
</blockquote>
<blockquote>
<p>本文主要介绍 PPT 中设置图片透明背景的方法。</p>
</blockquote>
<span id="more"></span>
<p>如下图，PPT 中插入一张白色背景图片，和 PPT 模板背景有色差。</p>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20211103173325763.png" alt="PPT 中插入有背景的图片" style="zoom: 50%;"></p>
<p><strong>第一步，</strong>选中图片 —— 格式</p>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20211103173613976.png" alt="第一步，图片格式" style="zoom:67%;"></p>
<p><strong>第二步，</strong>颜色 —— 设置透明色</p>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20211103173703704.png" alt="第二步，设置透明色" style="zoom:67%;"></p>
<p><strong>第三步，</strong>删除背景，点击图片背景。</p>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20211103173855302.png" alt="第三步，删除背景" style="zoom:67%;"></p>
]]></content>
      <categories>
        <category>Office</category>
      </categories>
      <tags>
        <tag>PPT</tag>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm设置文件模板</title>
    <url>/2021/11/28/Python/Pycharm%E8%AE%BE%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>本文记录使用 Pycharm 设置 Python 脚本模板，在 .py 文件开头添加编码语法声明、shebang 标记、作者信息等内容</p>
</blockquote>
<span id="more"></span>
<p>Pycharm 中：</p>
<p>Settings —— Editor —— File and Code Templates —— Python Script</p>
<p>添加如下内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">====================================</span></span><br><span class="line"><span class="string">@File Name ：$&#123;NAME&#125;.py</span></span><br><span class="line"><span class="string">@Time ： $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="string">@Program IDE ：$&#123;PRODUCT_NAME&#125;</span></span><br><span class="line"><span class="string">@Create by Author ： 一一风和橘</span></span><br><span class="line"><span class="string">@Motto：&quot;The trick, William Potter, is not minding that it hurts.&quot;</span></span><br><span class="line"><span class="string">====================================</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ol type="1">
<li>编码语法声明：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>shebang 符号</li>
</ol>
<ul>
<li>使用 <code>which</code> 查询 <code>python3</code> 解释器所在路径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> python3</span><br></pre></td></tr></table></figure>
<ul>
<li>修改要运行的主 python 文件，在第一行增加以下内容</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改主 python 文件的文件权限，增加执行权限</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod +x cards_main.py</span><br></pre></td></tr></table></figure>
<ul>
<li>在需要时执行程序即可</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./main.py</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>Pycharm 关键字</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;NAME&#125;</span> - 新建文件过程中设置的新文件名称；</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;DATE&#125;</span> - 系统日期；</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;TIME&#125;</span> - 系统时间；</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;PRODUCT_NAME&#125;</span> - 创建文件所用 IDE 的名称；</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;PROJECT_NAME&#125;</span> - 项目名称；</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;USER&#125;</span> - 当前登录的用户名；</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;YEAR&#125;</span> - 年；</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;MONTH&#125;</span> - 月；</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;DAY&#125;</span> - 日；</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;HOUR&#125;</span> - 时；</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;MINUTE&#125;</span> - 分；</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;MONTH_NAME_SHORT&#125;</span> - 月份缩写；</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;MONTH_NAME_FULL&#125;</span> - 月份全名。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyside6踩坑记（持续更新中...）</title>
    <url>/2021/11/28/PythonGUI%E7%BC%96%E7%A8%8B/Pyside6%E8%B8%A9%E5%9D%91%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>使用 Pyside6 的记录</p>
</blockquote>
<span id="more"></span>
<h2 id="壹丨环境配置">壹丨环境配置</h2>
<p>第一步，Pycharm 中新建工程，命名 <code>MasterFusion</code></p>
<p>第二步，pip 安装pyside6</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install PySide6</span><br></pre></td></tr></table></figure>
<p>第三步，配置 QtDesigner</p>
<p>Settings —— Tools —— External Tools —— 加号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># name</span></span><br><span class="line">QtDesigner6</span><br><span class="line"></span><br><span class="line"><span class="comment"># Program</span></span><br><span class="line">C:\Users\MasterMao\anaconda3\envs\MasterFusion\Lib\site-packages\PySide6\designer.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># Working directory</span></span><br><span class="line">$FileDir$</span><br></pre></td></tr></table></figure>
<p>文件资源管理器定位到 <code>C:\Users\MasterMao\anaconda3\envs\MasterFusion\Lib\site-packages\PySide6</code>，新建文件夹 <code>./bin</code>，将PySide6根目录下 的<code>uic.exe</code>、<code>Qt6Core.dll</code> 拷贝到 <code>bin</code> 目录下</p>
<h2 id="贰丨使用-pydracula-模板">贰丨使用 PyDracula 模板</h2>
<p>项目地址：https://github.com/Wanderson-Magalhaes/Modern_GUI_PyDracula_PySide6_or_PyQt6</p>
<p>文件说明：</p>
<blockquote>
<p><strong>main.py</strong>: 初始化文件</p>
<p><strong>main.ui</strong>: Qt Designer 工程文件</p>
<p><strong>resouces.qrc</strong>: Qt Designer 资源文件，使用 Designer 添加资源</p>
<p><strong>setup.py</strong>: 使用 cx-Freeze 编译程序</p>
<p><strong>themes/</strong>: 主题文件</p>
<p><strong>modules/</strong>: PyDracula GUI 的模块</p>
<p><strong>modules/app_funtions.py</strong>: 此处添加应用程序</p>
<p><strong>modules/app_settings.py</strong>: 用户界面全局变量</p>
<p><strong>modules/resources_rc.py</strong>: 使用Python命令编译resource.qrc文件，命令为 <code>pyside6-rcc resources.qrc -o resources_rc.py</code></p>
<p><strong>modules/ui_functions.py</strong>: 仅为与用户界面相关的功能</p>
<p><strong>modules/ui_main.py</strong>: Qt Designer导出的界面文件。可编译命令：<code>pyside6-uic main.ui&gt; ui_main.py</code></p>
<p>需要将原文中 <code>import resources_rc</code> 改为 <code>from. Resoucers_rc import *</code></p>
<p><strong>images/</strong>: 将图片和图标放在此处。 <code>pyside6-rcc resources.qrc -o resources_rc.py</code>.</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pyside6</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy基础</title>
    <url>/2021/06/29/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Numpy%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/Numpy%E5%9F%BA%E7%A1%80.png"></p>
<span id="more"></span>
<h2 id="一ndarray实例">一、ndarray实例</h2>
<ul>
<li><p>np.array()——生成数组</p></li>
<li>.axis——表示数据维度</li>
<li>.rank——轴数量</li>
<li>.ndim——秩</li>
<li>.shape——n行m列</li>
<li>.size——元素个数，=n*m</li>
<li>.dtype——元素类型</li>
<li><p>.itemsize——每个元素大小，字节为单位</p></li>
</ul>
<h2 id="二ndarry数据类型">二、ndarry数据类型</h2>
<ul>
<li>bool——True/False</li>
<li>intc——与C语言int类型一致，int32/int64</li>
<li><p>intp——用于索引的整数，与C中ssize_t一致，int32/int64</p></li>
<li>int8——字节整数，[-128, 127]</li>
<li>int16——16位整数，[-32768, 32767]</li>
<li>int32——32位整数，[-2^31, 2^31-1]</li>
<li><p>int64——64位整数，[-2^63, 2^63-1]</p></li>
<li>uint8——8位无符号整数，[0, 255]</li>
<li>uint16——[0, 65535]</li>
<li>uint32——[0, 2^32-1]</li>
<li><p>uint64——[0, 2^64-1]</p></li>
<li>float16——16位半精度浮点，1位符号位，5位指数，10位尾数</li>
<li>float32——32位半精度浮点，1位符号位，8位指数，23位尾数</li>
<li><p>float64——64位半精度浮点，1位符号位，11位指数，52位尾数</p></li>
<li>complex64——复数，实部虚部各32位浮点</li>
<li><p>complex128——复数，实部虚部各64位浮点</p></li>
</ul>
<h2 id="三数组创建">三、数组创建</h2>
<h3 id="继承">1. 继承</h3>
<ul>
<li>np.array(list/tumple)</li>
</ul>
<h3 id="初始化">2. 初始化</h3>
<ul>
<li>np.arange(n)——0, n-1整数</li>
<li>np.ones(shape)</li>
<li>np.zeros(shape)</li>
<li>np.full(shape, val)</li>
<li>np.eye(n)——n*n单位阵</li>
<li>np.ones_like(a)——根据a的形状形成数组</li>
<li>np.zeros_like(a)</li>
<li>np.full_like(a, val)</li>
</ul>
<h3 id="其他函数">3. 其他函数</h3>
<ul>
<li>np.linspace()——根据起止数据等间隔填充数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 10不包括在数组内</span></span><br><span class="line">a = np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">4</span>, endpoint=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>np.concatenate()——两个或多个合并</li>
</ul>
<h2 id="四维度变换">四、维度变换</h2>
<ul>
<li>.reshape(shape)——原数组不变</li>
<li>.resize(shape)——原数组改变</li>
<li>.swapaxes(ax1, ax2)——调换维度</li>
<li>.flatten()——数组降为一维，原数组不变</li>
</ul>
<h2 id="五类型变换">五、类型变换</h2>
<ul>
<li>.astype()，会产生新数组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.ones((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), dtype=np.<span class="built_in">int</span>)</span><br><span class="line">b = a.astype(np.<span class="built_in">float</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>.tolist()，转换为列表</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls = a.tolist()</span><br></pre></td></tr></table></figure>
<h2 id="六索引和切片">六、索引和切片</h2>
<ul>
<li>一维数组切片</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># 取出8，6</span></span><br><span class="line">a[<span class="number">1</span>: <span class="number">4</span>: <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>多维数组切片</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="comment"># 取出第三维度的第0,2轴</span></span><br><span class="line">a[:, :, ::<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<h2 id="七函数">七、函数</h2>
<ul>
<li>.mean()——平均</li>
<li>np.abs(x) / np.fabs(x)——绝对值</li>
<li>np.sqrt(x)——平方根</li>
<li>np.square(x)——平方</li>
<li>np.log(x) / np.log10(x) / np.log2(x)</li>
<li>np.ceil(x) / np.floor(x)——计算各元素ceiling或floor</li>
</ul>
]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Numpy</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础</title>
    <url>/2021/07/13/Python/Python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="一pycharm基础使用">一、Pycharm基础使用</h2>
<h4 id="单词列表">单词列表</h4>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>error 错误</span><br><span class="line"><span class="bullet">* </span>name 名字</span><br><span class="line"><span class="bullet">* </span>defined 已经定义</span><br><span class="line"><span class="bullet">* </span>syntax 语法</span><br><span class="line"><span class="bullet">* </span>invalid 无效</span><br><span class="line"><span class="bullet">* </span>Indentation 索引</span><br><span class="line"><span class="bullet">* </span>unexpected 意外的，不期望的</span><br><span class="line"><span class="bullet">* </span>character 字符</span><br><span class="line"><span class="bullet">* </span>line 行</span><br><span class="line"><span class="bullet">* </span>encoding 编码</span><br><span class="line"><span class="bullet">* </span>declared 声明</span><br><span class="line"><span class="bullet">* </span>details 细节，详细信息</span><br><span class="line"><span class="bullet">* </span>ASCII 一种字符编码</span><br></pre></td></tr></table></figure>
<h3 id="python-解释器">Python 解释器</h3>
<ul>
<li><code>CPython</code> —— 官方版本的 C 语言实现</li>
<li><code>Jython</code> —— 可以运行在 Java 平台</li>
<li><code>IronPython</code> —— 可以运行在 .NET 和 Mono 平台</li>
<li><code>PyPy</code> —— Python 实现的，支持 JIT 即时编译</li>
</ul>
<h2 id="二编程语言科普">二、编程语言科普</h2>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/001_%E7%BC%96%E8%AF%91%E5%9E%8B%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%B7%A5%E4%BD%9C%E5%AF%B9%E6%AF%94.png"></p>
<ul>
<li><strong>编译型语言</strong>：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如 C、C++（速度快）</li>
<li><strong>解释型语言</strong>：解释型语言编写的程序不进行预先编译，以文本方式存储程序代码，会将代码一句一句直接运行。在发布程序时，看起来省了道编译工序，但是在运行程序的时候，必须先解释再运行。（跨平台）</li>
</ul>
<h2 id="三代码规范">三、代码规范</h2>
<p><strong>PEP 8</strong>代码格式：https://www.python.org/dev/peps/pep-0008/</p>
<p>中文文档：https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/#id1</p>
<blockquote>
<p>Tip: 大部分.py文件不必以#!作为文件的开始. 根据 <a href="http://www.python.org/dev/peps/pep-0394/">PEP-394</a> , 程序的main文件应该以 #!/usr/bin/python2或者 #!/usr/bin/python3开始.(类Unix操作系统的程序载入器会分析Shebang后的内容, 将这些内容作为解释器指令, 并调用该指令, 并将载有Shebang的文件路径作为该解释器的参数. )</p>
</blockquote>
<blockquote>
<p>Tip: 如果一个类不继承自其它类, 就显式的从object继承. 嵌套类也一样.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 继承自 object 是为了使属性(properties)正常工作, 并且这样可以保护你的代码, 使其不受 PEP-3000 的一个特殊的潜在不兼容性影响. 这样做也定义了一些特殊的方法, 这些方法实现了对象的默认语义, 包括 __new__, __init__, __delattr__, __getattribute__, __setattr__, __hash__, __repr__, and __str__ .</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span>(<span class="params">ParentClass</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Explicitly inherits from another class already.&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tip: 避免在循环中用+和+=操作符来累加字符串.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串是不可变的, 这样做会创建不必要的临时对象, 并且导致二次方而不是线性的运行时间. 作为替代方案, 你可以将每个子串加入列表, 然后在循环结束后用 `.join` 连接列表. (也可以将每个子串写入一个 `cStringIO.StringIO` 缓存中.)</span></span><br><span class="line"></span><br><span class="line">items = [<span class="string">&#x27;&lt;table&gt;&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> last_name, first_name <span class="keyword">in</span> employee_list:</span><br><span class="line">items.append(<span class="string">&#x27;&lt;tr&gt;&lt;td&gt;%s, %s&lt;/td&gt;&lt;/tr&gt;&#x27;</span> % (last_name, first_name))</span><br><span class="line">items.append(<span class="string">&#x27;&lt;/table&gt;&#x27;</span>)</span><br><span class="line">employee_table = <span class="string">&#x27;&#x27;</span>.join(items)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tip: 命名规范</p>
</blockquote>
<p><strong>Python之父Guido推荐的规范</strong></p>
<table>
<colgroup>
<col style="width: 34%">
<col style="width: 15%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th>Type</th>
<th>Public(公有)</th>
<th>Internal(内部)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Modules(模块)</td>
<td>lower_with_under</td>
<td>_lower_with_under</td>
</tr>
<tr class="even">
<td>Packages(包)</td>
<td>lower_with_under</td>
<td></td>
</tr>
<tr class="odd">
<td><strong>Classes(类)</strong></td>
<td>CapWords</td>
<td>_CapWords</td>
</tr>
<tr class="even">
<td><strong>Exceptions()</strong></td>
<td>CapWords</td>
<td></td>
</tr>
<tr class="odd">
<td>Functions(函数)</td>
<td>lower_with_under()</td>
<td>_lower_with_under()</td>
</tr>
<tr class="even">
<td><strong>Global/Class Constants(全局/类常量)</strong></td>
<td>CAPS_WITH_UNDER</td>
<td>_CAPS_WITH_UNDER</td>
</tr>
<tr class="odd">
<td>Global/Class Variables(全局/类变量)</td>
<td>lower_with_under</td>
<td>_lower_with_under</td>
</tr>
<tr class="even">
<td>Instance Variables(实例变量)</td>
<td>lower_with_under</td>
<td>_lower_with_under (protected) or __lower_with_under (private)</td>
</tr>
<tr class="odd">
<td>Method Names(方法名)</td>
<td>lower_with_under()</td>
<td>_lower_with_under() (protected) or __lower_with_under() (private)</td>
</tr>
<tr class="even">
<td>Function/Method Parameters(函数/方法参数)</td>
<td>lower_with_under</td>
<td></td>
</tr>
<tr class="odd">
<td>Local Variables(局部变量)</td>
<td>lower_with_under</td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>Tip: main函数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python中, pydoc以及单元测试要求模块必须是可导入的. 代码应该在执行主程序前总是检查 `if __name__ == &#x27;__main__&#x27;` , 这样当模块被导入时主程序就不会被执行.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h2 id="四变量">四、变量</h2>
<h3 id="格式化输出">格式化输出</h3>
<table>
<thead>
<tr class="header">
<th>格式化字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>%s</td>
<td>字符串</td>
</tr>
<tr class="even">
<td>%d</td>
<td>有符号十进制整数，<code>%06d</code> 表示输出的整数显示位数，不足的地方使用 <code>0</code> 补全</td>
</tr>
<tr class="odd">
<td>%f</td>
<td>浮点数，<code>%.2f</code> 表示小数点后只显示两位</td>
</tr>
<tr class="even">
<td>%%</td>
<td>输出 <code>%</code></td>
</tr>
</tbody>
</table>
<h3 id="命名规则">命名规则</h3>
<ul>
<li><p>每个单词都使用小写字母</p></li>
<li>单词与单词之间使用 <strong><code>_</code>下划线</strong> 连接
<ul>
<li>例如：<code>first_name</code>、<code>last_name</code>、<code>qq_number</code>、<code>qq_password</code></li>
</ul></li>
</ul>
<h3 id="驼峰命名法">驼峰命名法</h3>
<ul>
<li>当 <strong>变量名</strong> 是由二个或多个单词组成时，还可以利用驼峰命名法来命名</li>
<li><strong>小驼峰式命名法</strong>
<ul>
<li>第一个单词以小写字母开始，后续单词的首字母大写</li>
<li>例如：<code>firstName</code>、<code>lastName</code></li>
</ul></li>
<li><strong>大驼峰式命名法</strong>
<ul>
<li>每一个单词的首字母都采用大写字母</li>
<li>例如：<code>FirstName</code>、<code>LastName</code>、<code>CamelCase</code></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实践</title>
    <url>/2021/07/16/Python/Python%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一名片管理系统">一、名片管理系统</h1>
<p>【需求】</p>
<ol type="1">
<li>程序启动，显示名片管理系统欢迎界面，并显示功能菜单</li>
<li>用户用数字选择不同的功能</li>
<li>根据功能选择，执行不同的功能</li>
<li>用户名片需要记录用户的 <strong>姓名</strong>、<strong>电话</strong>、<strong>QQ</strong>、<strong>邮件</strong></li>
<li>如果查询到指定的名片，用户可以选择 <strong>修改</strong> 或者 <strong>删除</strong> 名片</li>
</ol>
<p>【显示样式】</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**************************************************</span><br><span class="line">欢迎使用【名片管理系统】V1.0</span><br><span class="line"></span><br><span class="line">1. 新建名片</span><br><span class="line">2. 显示全部</span><br><span class="line">3. 查询名片</span><br><span class="line"></span><br><span class="line">0. 退出系统</span><br><span class="line">**************************************************</span><br></pre></td></tr></table></figure>
<p>【代码】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /user/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@ Date: 2021.7.16</span></span><br><span class="line"><span class="string">@ Aim: 名片管理系统</span></span><br><span class="line"><span class="string">@ Author: MasterMao</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cards</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.card_list = []</span><br><span class="line">        self.num = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_card</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;新建名片&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;功能：新建名片\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 提示用户输入名片信息</span></span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br><span class="line">        phone = <span class="built_in">input</span>(<span class="string">&quot;请输入电话：&quot;</span>)</span><br><span class="line">        qq = <span class="built_in">input</span>(<span class="string">&quot;请输入 QQ 号码：&quot;</span>)</span><br><span class="line">        email = <span class="built_in">input</span>(<span class="string">&quot;请输入邮箱：&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 将用户信息保存到一个字典</span></span><br><span class="line">        card_dict = &#123;<span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">                     <span class="string">&quot;phone&quot;</span>: phone,</span><br><span class="line">                     <span class="string">&quot;qq&quot;</span>: qq,</span><br><span class="line">                     <span class="string">&quot;email&quot;</span>: email&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 将用户字典添加到名片列表</span></span><br><span class="line">        self.card_list.append(card_dict)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 提示添加成功信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;成功添加 %s 的名片&quot;</span> % card_dict[<span class="string">&quot;name&quot;</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_all</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示全部&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;功能：显示全部\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.card_list:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Warning!没有查询到记录&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">40</span>, <span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印表头</span></span><br><span class="line">        self.print_card(self.card_list)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">40</span>, <span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_card</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;查找名片&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;功能：查询名片\n&quot;</span>)</span><br><span class="line">        <span class="comment"># 1. 输入要搜索的姓名</span></span><br><span class="line">        find_name = <span class="built_in">input</span>(<span class="string">&quot;请输入要搜索的姓名：&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 遍历字典</span></span><br><span class="line">        <span class="keyword">for</span> card_dict <span class="keyword">in</span> self.card_list:</span><br><span class="line">            <span class="keyword">if</span> card_dict[<span class="string">&quot;name&quot;</span>] == find_name:</span><br><span class="line">                self.print_card([card_dict])</span><br><span class="line">                action_char = <span class="built_in">input</span>(<span class="string">&quot;选择要执行的操作：[1] 修改  [2] 删除  [3] 返回上级菜单\n&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> action_char == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    self.modify_card(find_name)</span><br><span class="line">                <span class="keyword">elif</span> action_char == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                    self.remove_card(find_name)</span><br><span class="line">                <span class="keyword">elif</span> action_char == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Warning! 输入有误！&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;没有找到 %s&quot;</span> % find_name)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">40</span>, <span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">modify_card</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        modify_aim = [item <span class="keyword">for</span> item <span class="keyword">in</span> self.card_list <span class="keyword">if</span> item[<span class="string">&quot;name&quot;</span>] == name]</span><br><span class="line">        tem_name = <span class="built_in">input</span>(<span class="string">&quot;请修改姓名：&quot;</span>)</span><br><span class="line">        name = tem_name <span class="keyword">if</span> tem_name <span class="keyword">else</span> modify_aim[<span class="number">0</span>][<span class="string">&quot;name&quot;</span>]</span><br><span class="line">        tem_phone = <span class="built_in">input</span>(<span class="string">&quot;请修改电话：&quot;</span>)</span><br><span class="line">        phone = tem_phone <span class="keyword">if</span> tem_phone <span class="keyword">else</span> modify_aim[<span class="number">0</span>][<span class="string">&quot;phone&quot;</span>]</span><br><span class="line">        tem_qq = <span class="built_in">input</span>(<span class="string">&quot;请修改 QQ 号码：&quot;</span>)</span><br><span class="line">        qq = tem_qq <span class="keyword">if</span> tem_qq <span class="keyword">else</span> modify_aim[<span class="number">0</span>][<span class="string">&quot;qq&quot;</span>]</span><br><span class="line">        tem_email = <span class="built_in">input</span>(<span class="string">&quot;请修改邮箱：&quot;</span>)</span><br><span class="line">        email = tem_email <span class="keyword">if</span> tem_email <span class="keyword">else</span> modify_aim[<span class="number">0</span>][<span class="string">&quot;email&quot;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 将用户信息保存到一个字典</span></span><br><span class="line">        card_dict = &#123;<span class="string">&quot;name&quot;</span>: name, <span class="string">&quot;phone&quot;</span>: phone, <span class="string">&quot;qq&quot;</span>: qq, <span class="string">&quot;email&quot;</span>: email&#125;</span><br><span class="line"></span><br><span class="line">        self.remove_card(name)</span><br><span class="line">        self.card_list.append(card_dict)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_card</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.card_list = [item <span class="keyword">for</span> item <span class="keyword">in</span> self.card_list <span class="keyword">if</span> <span class="keyword">not</span> item[<span class="string">&quot;name&quot;</span>] == name]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_menu</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;**&quot;</span> * <span class="number">20</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;欢迎使用名片管理系统 V1.0&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;1. 新建名片&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;2. 显示全部&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;3. 查询名片&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;0. 退出系统&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;**&quot;</span> * <span class="number">20</span>)</span><br><span class="line">        self.num = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_card</span>(<span class="params">card_list</span>):</span></span><br><span class="line">        <span class="comment"># 打印表头</span></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;电话&quot;</span>, <span class="string">&quot;QQ&quot;</span>, <span class="string">&quot;邮箱&quot;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(name, end=<span class="string">&quot;\t\t&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="comment"># 打印分隔线</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line">        <span class="keyword">for</span> card_dict <span class="keyword">in</span> card_list:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s\t\t%s\t\t%s\t\t%s&quot;</span> % (card_dict[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                                            card_dict[<span class="string">&quot;phone&quot;</span>],</span><br><span class="line">                                            card_dict[<span class="string">&quot;qq&quot;</span>],</span><br><span class="line">                                            card_dict[<span class="string">&quot;email&quot;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exit_program</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;程序退出！&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    cards = Cards()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        cards.show_menu()</span><br><span class="line">        <span class="keyword">if</span> cards.num == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            cards.exit_program()</span><br><span class="line">        <span class="keyword">elif</span> cards.num == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            cards.new_card()</span><br><span class="line">        <span class="keyword">elif</span> cards.num == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            cards.show_all()</span><br><span class="line">        <span class="keyword">elif</span> cards.num == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">            cards.search_card()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>Python可视化——Seaborn</title>
    <url>/2021/06/29/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94Seaborn/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="待整理...">待整理...</h2>
<span id="more"></span>
<p>做鸢尾花数据集分类的时候查到的，就是这个图——</p>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/seaborn.png"></p>
<h2 id="官方demo">官方demo：</h2>
<p>http://seaborn.pydata.org/examples/index.html</p>
<h2 id="csdn博客">CSDN博客：</h2>
<p>https://blog.csdn.net/qq_39949963/article/details/79362501</p>
<p>https://blog.csdn.net/qq_39949963/article/details/79371141</p>
<p>https://blog.csdn.net/qq_39949963/article/details/79387486</p>
<p>https://blog.csdn.net/qq_39949963/article/details/80750492</p>
<p>https://blog.csdn.net/qq_39949963/article/details/80773588</p>
<p>https://blog.csdn.net/qq_39949963/article/details/103863671</p>
<p>https://blog.csdn.net/qq_39949963/article/details/103863734</p>
]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
        <tag>Seaborn</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析常用算法</title>
    <url>/2021/06/29/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="转发...">转发...</h2>
<span id="more"></span>
<h3 id="svmlr决策树的对比经常问">SVM、LR、决策树的对比？（经常问）</h3>
<p>模型复杂度：SVM支持核函数，可处理线性、非线性问题；LR模型简单，训练速度快，适合处理线性问题；决策树容易过拟合，需要进行剪枝</p>
<p>损失函数：SVM <strong>铰链损失</strong>（hinge loss）; LR L2正则化; adaboost 指数损失</p>
<p>数据敏感度：SVM添加容忍度对outlier不敏感，只关心支持向量，且需要先做归一化; LR对远点敏感</p>
<p>数据量：数据量大就用LR，数据量小且特征少就用SVM非线性核</p>
<p>损失函数：https://blog.csdn.net/u010976453/article/details/78488279</p>
<p>逻辑回归（LR）和支持向量机（SVM）的区别和联系：https://www.cnblogs.com/huangyc/p/9943364.html#_label3</p>
<p>LR,SVM,RF的区别：https://blog.csdn.net/zhangbaoanhadoop/article/details/82055643</p>
<p>补充：</p>
<p><strong>LR和SVM的联系</strong></p>
<ol type="1">
<li>都是监督学习的分类算法。</li>
<li>都是线性分类方法 (不考虑核函数时）。</li>
<li>都是<a href="https://www.cnblogs.com/huangyc/p/9943364.html#_label3">判别模型</a>。</li>
</ol>
<p><strong>LR和SVM的不同</strong></p>
<ol type="1">
<li><a href="https://www.cnblogs.com/huangyc/p/9938314.html">损失函数</a>的不同，<strong>LR是对数损失函数，SVM是hinge损失函数</strong>。</li>
<li>SVM不能产生概率，LR可以产生概率。</li>
<li>SVM自带<strong>结构风险最小化</strong>，LR则是<strong>经验风险最小化</strong>。</li>
<li>SVM会用核函数而LR一般不用<a href="https://www.cnblogs.com/huangyc/p/9940487.html">核函数</a>。</li>
<li>LR和SVM在实际应用的区别：根据经验来看，对于<strong>小规模数据集</strong>，SVM的效果要好于LR，但是<strong>大数据中</strong>，SVM的计算复杂度受到限制，而LR因为训练简单，可以在线训练，所以经常会被大量采用。</li>
</ol>
<p><strong>概念解释</strong></p>
<ul>
<li><strong>判别模型</strong>：是直接生成一个表示或者的判别函数（或预测模型），SVM和LR，KNN，决策树都是判别模型。</li>
<li><strong>生成模型</strong>：是先计算联合概率分布然后通过贝叶斯公式转化为条件概率，朴素贝叶斯，隐马尔可夫模型是生成模型。</li>
<li><strong>经验风险</strong>：对<strong>所有训练样本</strong>都求一次损失函数，再累加求平均。即，模型f(x)f(x)对训练样本中所有样本的预测能力。</li>
<li><strong>期望风险</strong>：对<strong>所有样本</strong>（包含未知样本和已知的训练样本）的预测能力，是全局概念。（经验风险则是局部概念，仅仅表示决策函数对训练数据集里的样本的预测能力。）</li>
<li><strong>结构风险</strong>：对经验风险和期望风险的折中，在经验风险函数后面加一个正则化项（惩罚项），是一个大于0的系数λλ。J(f)J(f)表示的是模型的复杂度。</li>
</ul>
<h3 id="决策树">决策树</h3>
<p><strong>优点</strong></p>
<p>1.可以很容易地将模型进行可视化</p>
<p>2.不需要对数据进行预处理</p>
<p>3.计算复杂度不高，输出结果易于理解，对中间值的缺失不敏感</p>
<p>4.既能用于分类，也能用于回归</p>
<p>5.数据形式非常容易理解</p>
<p><strong>缺点</strong></p>
<p>不可避免会出现过拟合的问题，使得模型的泛化能力大打折扣</p>
<p><strong>注意</strong></p>
<p><strong>决策树：参数max_depth越大，越容易过拟合</strong></p>
<h3 id="逻辑斯蒂回归">逻辑斯蒂回归</h3>
<h4 id="原理经常问">原理（经常问）</h4>
<p>1.找到一个合适的预测函数（分类函数）（sigmoid函数，也就逻辑斯蒂函数）</p>
<p>2.构造一个损失函数，预测的y值减去真实的y值，这个函数就是构造的损失函数。可以是二者的差，或者其他形式，综合Cost求和或者求平均，即为J(θ)</p>
<p>3.J(θ)的值越小就证明预测函数越正确，梯度下降法</p>
<h4 id="主要思想">主要思想</h4>
<p>利用Logistics回归进行分类的主要思想是：<strong>根据现有数据对分类边界线建立回归公式</strong>，<strong>以此进行分类</strong>。这里的“回归” 一词源于最佳拟合，表示要找到最佳拟合参数集。</p>
<h4 id="理解">理解</h4>
<p>https://blog.csdn.net/touch_dream/article/details/79371462 （精辟）</p>
<p>逻辑斯蒂回归是一种对数线性模型。经典的逻辑斯蒂回归模型（LR）可以用来解决二分类问题，但是它输出的并不是确切类别，而是一个概率。</p>
<p>在分析LR原理之前，先分析一下线性回归。线性回归能将输入数据通过对各个维度的特征分配不同的权重来进行表征，使得所有特征协同作出最后的决策。但是，这种表征方式是对模型的一个拟合结果，不能直接用于分类。</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">在<span class="built_in">LR</span>中，将线性回归的结果通过sigmod函数映射到<span class="number">0</span>到<span class="number">1</span>之间，映射的结果刚好可以看做是数据样本点属于某一类的概率，如果结果越接近<span class="number">0</span>或者<span class="number">1</span>，说明分类结果的可信度越高。这样做不仅应用了线性回归的优势来完成分类任务，而且分类的结果是<span class="number">0</span>~<span class="number">1</span>之间的概率，可以据此对数据分类的结果进行打分。对于线性不可分的数据，可以对非线性函数进行线性加权，得到一个不是超平面的分割面。</span><br></pre></td></tr></table></figure>
<h4 id="优缺点">优缺点</h4>
<p><strong>优点</strong></p>
<p>1.适合需要得到一个分类概率的场景。</p>
<p>2.计算代价不高，容易理解实现。LR在时间和内存需求上相当高效。它可以应用于分布式数据，并且还有在线算法实现，用较少的资源处理大型数据。</p>
<p>3.LR对于数据中小噪声的鲁棒性很好，并且不会受到轻微的多重共线性的特别影响。（严重的多重共线性则可以使用逻辑回归结合L2正则化来解决，但是若要得到一个简约模型，L2正则化并不是最好的选择，因为它建立的模型涵盖了全部的特征。）</p>
<p><strong>缺点</strong></p>
<p>1.容易欠拟合，分类精度不高。</p>
<p>2.数据特征有缺失或者特征空间很大时表现效果并不好。</p>
<h3 id="逻辑回归和线性回归的区别">逻辑回归和线性回归的区别</h3>
<p>其实没有多大的区别，就是逻辑回归本质是线性回归，不过多了一个Sigmoid函数，使样本能映射到[0,1]之间的数值，用来做分类问题。</p>
<p>线性回归用来预测，逻辑回归用来分类。</p>
<p>线性回归是拟合函数，逻辑回归是预测函数</p>
<p>线性回归的参数计算方法是最小二乘法，逻辑回归的参数计算方法是梯度下降</p>
<h3 id="逻辑斯蒂回归与svm比较">逻辑斯蒂回归与SVM比较</h3>
<p>线性回归做分类因为考虑了所有样本点到分类决策面的距离，所以在两类数据分布不均匀的时候将导致误差非常大；LR和SVM克服了这个缺点，其中LR将所有数据采用sigmod函数进行了非线性映射，使得远离分类决策面的数据作用减弱；SVM直接去掉了远离分类决策面的数据，只考虑支持向量的影响。</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">但是对于这两种算法来说，在线性分类情况下，如果异常点较多无法剔除的话，<span class="built_in">LR</span>中每个样本都是有贡献的，最大似然后会自动压制异常的贡献；SVM+软间隔对异常比较敏感，因为其训练只需要支持向量，有效样本本来就不高，一旦被干扰，预测结果难以预料。</span><br></pre></td></tr></table></figure>
<h3 id="决策树的减枝">决策树的减枝</h3>
<h4 id="算法目的">算法目的</h4>
<p>决策树的剪枝是为了简化决策树模型，避免过拟合。</p>
<h4 id="算法基本思路">算法基本思路</h4>
<p>剪去决策树模型中的一些子树或者叶结点，并将其上层的根结点作为新的叶结点，从而减少了叶结点甚至减少了层数，降低了决策树复杂度。</p>
<h4 id="剪枝类型">剪枝类型</h4>
<p><strong>预剪枝、后剪枝</strong></p>
<ul>
<li>预剪枝是在决策树生成过程中，对树进行剪枝，提前结束树的分支生长。</li>
<li>后剪枝是在决策树生长完成之后，对树进行剪枝，得到简化版的决策树。</li>
</ul>
<h4 id="预剪枝依据"><strong>预剪枝依据</strong></h4>
<ul>
<li>作为叶结点或作为根结点需要含的最少样本个数</li>
<li>决策树的层数</li>
<li>结点的经验熵小于某个阈值才停止</li>
</ul>
<p>决策树的减枝：https://blog.csdn.net/bird_fly_i/article/details/72824639</p>
<h3 id="k-近邻knn">K-近邻（KNN）</h3>
<p><strong>可以用于分类，也可以用于回归</strong></p>
<p>分类：类别是明显的</p>
<p>回归：对趋势的一个预测（预测走势），是一个范围</p>
<h4 id="k-近邻算法原理">k-近邻算法原理</h4>
<p>简单地说，K-近邻算法采用测量不同特征值之间的距离方法进行分类。</p>
<ul>
<li>优点：精度高、对异常值不敏感、无数据输入假定。</li>
<li>缺点：时间复杂度高、空间复杂度高。</li>
<li>适用数据范围：数值型和标称型。</li>
</ul>
<h3 id="支持向量机svm">支持向量机SVM</h3>
<h4 id="支持向量机的原理">支持向量机的原理</h4>
<p><strong>原理</strong></p>
<p>根据部分的数据决定分类器（分类边界线）。</p>
<p><strong>支持向量机</strong></p>
<p>其含义是通过支持向量运算的分类器。其中“机”的意思是机器，可以理解为分类器。</p>
<p><strong>支持向量</strong></p>
<p>在求解的过程中，会发现只根据部分数据就可以确定分类器，这些数据称为支持向量。</p>
<h4 id="解决的问题">解决的问题</h4>
<ul>
<li>线性分类 在训练数据中，每个数据都有n个的属性和一个二类类别标志，我们可以认为这些数据在一个n维空间里。我们的目标是找到一个n-1维的超平面（hyperplane），这个超平面可以将数据分成两部分，每部分数据都属于同一个类别。 其实这样的超平面有很多，我们要找到一个最佳的。因此，增加一个约束条件：<strong>这个超平面到每边最近数据点的距离是最大的</strong>。也成为最大间隔超平面（maximum-margin hyperplane）。这个分类器也成为最大间隔分类器（maximum-margin classifier）。 支持向量机是一个二类分类器。</li>
<li>非线性分类 SVM的一个优势是支持非线性分类。它结合使用拉格朗日乘子法和KKT条件，以及核函数可以产生非线性分类器。</li>
</ul>
<h4 id="理解-1">理解</h4>
<p>SVM的目的是要找到一个线性分类的最佳超平面 f(x)=xw+b=0。求 w 和 b。</p>
<p>首先通过两个分类的最近点，找到f(x)的约束条件。</p>
<p>有了约束条件，就可以通过拉格朗日乘子法和KKT条件来求解，这时，问题变成了求拉格朗日乘子αi 和 b。</p>
<p>对于异常点的情况，加入松弛变量ξ来处理。</p>
<p>非线性分类的问题：映射到高维度、使用核函数。</p>
<h3 id="贝叶斯优缺点">贝叶斯优缺点</h3>
<p><strong>优点</strong></p>
<ul>
<li>朴素贝叶斯模型发源于古典数学理论，有着坚实的数学基础，以及稳定的分类效率；</li>
<li>对小规模的数据表现很好；</li>
<li>能处理多分类任务，适合增量式训练；</li>
<li>对缺失数据不太敏感，算法也比较简单，常用于文本分类</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>只能用于分类问题</li>
<li>需要计算先验概率；</li>
<li>分类决策存在错误率；</li>
<li>对输入数据的表达形式很敏感</li>
</ul>
<h3 id="为什么说朴素贝叶斯是高偏差低方差">为什么说朴素贝叶斯是高偏差低方差？</h3>
<p>它简单的假设了各个特征之间是无关的，是一个被严重简化了的模型。所以，对于这样一个简单模型，大部分场合都会偏差部分大于方差部分，也就是高偏差，低方差。</p>
<h3 id="随机森林如何评估特征重要性重要">随机森林如何评估特征重要性（重要）</h3>
<p>https://blog.csdn.net/zjupeco/article/details/77371645</p>
<p>http://charleshm.github.io/2016/03/Random-Forest-Tricks/</p>
<p>衡量变量重要性的方法有两种，Decrease GINI 和 Decrease Accuracy：</p>
<ol type="1">
<li><p>Decrease GINI： 对于回归问题，直接使用argmax(Var−VarLeft−VarRight)作为评判标准，即当前节点训练集的方差Var减去左节点的方差VarLeft和右节点的方差VarRight。</p></li>
<li><p>Decrease Accuracy：对于一棵树Tb(x)，我们用OOB样本可以得到测试误差1；然后随机改变OOB样本的第j列：保持其他列不变，对第j列进行随机的上下置换，得到误差2。至此，我们可以用误差1-误差2来刻画变量j的重要性。基本思想就是，如果一个变量j足够重要，那么改变它会极大的增加测试误差；反之，如果改变它测试误差没有增大，则说明该变量不是那么的重要。</p></li>
</ol>
<h3 id="傅里叶理解">傅里叶（理解）</h3>
<p>https://blog.csdn.net/Murray_/article/details/80277083</p>
<p>1.以时间作为参照来观察动态世界的方法称为时域分析。时域分析中的一条曲线，在频域中只是一个频率值，或者一系列不同频率值得叠加（时域图中横坐标为时间，频域图中横坐标为频率）</p>
<p>2.任何波形都可以由正弦波叠加而来。</p>
<p>3.傅里叶变换，就是将一个时域非周期的连续信号，转换为一个在频域上非周期的连续信号</p>
<h3 id="交叉验证">交叉验证</h3>
<p>https://www.cnblogs.com/pinard/p/5992719.html</p>
<h3 id="集成学习">集成学习</h3>
<p>https://www.cnblogs.com/pinard/p/6131423.html</p>
<h4 id="概述">1.概述</h4>
<p>对于训练集数据，我们通过训练若干个个体学习器，通过一定的结合策略，就可以最终形成一个强学习器，以达到博采众长的目的。</p>
<p>也就是说，集成学习有两个主要的问题需要解决，第一是如何得到若干个个体学习器，第二是如何选择一种结合策略，将这些个体学习器集合成一个强学习器。</p>
<p>也就是说，集成学习有两个主要的问题需要解决。</p>
<p><strong>第一是如何得到若干个个体学习器</strong>；</p>
<p><strong>第二是如何选择一种结合策略，将这些个体学习器集合成一个强学习器</strong>。</p>
<h4 id="集成学习之个体学习器">2.集成学习之个体学习器</h4>
<p>集成学习的第一个问题就是如何得到若干个个体学习器。这里我们有两种选择。</p>
<p>　　第一种就是所有的个体学习器都是一个种类的，或者说是同质的。比如都是决策树个体学习器，或者都是神经网络个体学习器。第二种是所有的个体学习器不全是一个种类的，或者说是异质的。比如我们有一个分类问题，对训练集采用支持向量机个体学习器，逻辑回归个体学习器和朴素贝叶斯个体学习器来学习，再通过某种结合策略来确定最终的分类强学习器。</p>
<p>　　目前来说，同质个体学习器的应用是最广泛的，一般我们常说的集成学习的方法都是指的同质个体学习器。而同质个体学习器使用最多的模型是CART决策树和神经网络。同质个体学习器按照个体学习器之间是否存在依赖关系可以分为两类，第一个是个体学习器之间存在强依赖关系，一系列个体学习器基本都需要串行生成，代表算法是boosting系列算法，第二个是个体学习器之间不存在强依赖关系，一系列个体学习器可以并行生成，代表算法是bagging和随机森林（Random Forest）系列算法。下面就分别对这两类算法做一个概括总结。</p>
<h4 id="集成学习之boosting">3.集成学习之boosting</h4>
<p>boosting的算法原理我们可以用一张图做一个概括如下：</p>
<p>看链接</p>
<p>从图中可以看出，Boosting算法的工作机制是首先从训练集用初始权重训练出一个弱学习器1，根据弱学习的学习误差率表现来更新训练样本的权重，使得之前弱学习器1学习误差率高的训练样本点的权重变高，使得这些误差率高的点在后面的弱学习器2中得到更多的重视。然后基于调整权重后的训练集来训练弱学习器2.，如此重复进行，直到弱学习器数达到事先指定的数目T，最终将这T个弱学习器通过集合策略进行整合，得到最终的强学习器。</p>
<p>　　Boosting系列算法里最著名算法主要有AdaBoost算法和提升树(boosting tree)系列算法。提升树系列算法里面应用最广泛的是梯度提升树(Gradient Boosting Tree)。AdaBoost和提升树算法的原理在后面的文章中会专门来讲。</p>
<h4 id="集成学习之bagging">4.集成学习之bagging</h4>
<p>Bagging的算法原理和 boosting不同，它的弱学习器之间没有依赖关系，可以并行生成，我们可以用一张图做一个概括如下：</p>
<p>看链接</p>
<p>从上图可以看出，bagging的个体弱学习器的训练集是通过随机采样得到的。通过T次的随机采样，我们就可以得到T个采样集，对于这T个采样集，我们可以分别独立的训练出T个弱学习器，再对这T个弱学习器通过集合策略来得到最终的强学习器。</p>
<p>　　对于这里的随机采样有必要做进一步的介绍，这里一般采用的是自助采样法（Bootstap sampling）,即对于m个样本的原始训练集，我们每次先随机采集一个样本放入采样集，接着把该样本放回，也就是说下次采样时该样本仍有可能被采集到，这样采集m次，最终可以得到m个样本的采样集，由于是随机采样，这样每次的采样集是和原始训练集不同的，和其他采样集也是不同的，这样得到多个不同的弱学习器。</p>
<p>　　随机森林是bagging的一个特化进阶版，所谓的特化是因为随机森林的弱学习器都是决策树。所谓的进阶是随机森林在bagging的样本随机采样基础上，又加上了特征的随机选择，其基本思想没有脱离bagging的范畴。bagging和随机森林算法的原理在后面的文章中会专门来讲。</p>
<h4 id="集成学习之结合策略">5. 集成学习之结合策略</h4>
<p>　　在上面几节里面我们主要关注于学习器，提到了学习器的结合策略但没有细讲，本节就对集成学习之结合策略做一个总结。我们假定我得到的T个弱学习器是{h1,h2,...hT}</p>
<h5 id="平均法">5.1平均法</h5>
<h5 id="投票法">5.2投票法</h5>
<h5 id="学习法">5.3学习法</h5>
<h3 id="交叉验证与网格搜索">交叉验证与网格搜索</h3>
<p>待写</p>
<h3 id="标准化与归一化的区别">标准化与归一化的区别</h3>
<p>简单来说，标准化是依照特征矩阵的列处理数据，其通过求z-score的方法，将样本的特征值转换到同一量纲下。归一化是依照特征矩阵的行处理数据，其目的在于样本向量在点乘运算或其他核函数计算相似性时，拥有统一的标准，也就是说都转化为“单位向量”。</p>
<p>算法可视化：https://visualgo.net/en</p>
<h2 id="转自httpswww.cnblogs.comjokerbip11017773.html">转自：https://www.cnblogs.com/jokerBi/p/11017773.html</h2>
]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
        <tag>Seaborn</tag>
      </tags>
  </entry>
  <entry>
    <title>回归问题评价指标</title>
    <url>/2021/06/29/Python%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>回归问题评价指标</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>对于分类问题而言，评价指标为准确率；</p>
<p>对于回归问题而言，评价指标有：MSE、RMSE、MAE、R-Squared</p>
<h2 id="均方误差mse">均方误差（MSE）</h2>
<p><span class="math display">\[
MSE=\frac{1}{N}\sum^{N}_{i=1}(y^i_{true}-y^i_{pred})^2
\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mse = np.<span class="built_in">sum</span>((y_pred - y_true) ** <span class="number">2</span>) / <span class="built_in">len</span>(y_true)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line">mae = mean_squared_error(y_true,y_pred)</span><br></pre></td></tr></table></figure>
<h2 id="均方根误差rmse">均方根误差（RMSE）</h2>
<p><span class="math display">\[
RMSE=\sqrt{\frac{1}{N}\sum^{N}_{i=1}(y^i_{true}-y^i_{pred})^2}
\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rmse = mse ** <span class="number">0.5</span></span><br></pre></td></tr></table></figure>
<h2 id="平均绝对误差mae">平均绝对误差（MAE）</h2>
<p><span class="math display">\[
MAE=\frac{1}{N}\sum^{N}_{i=1}|y^i_{true}-y^i_{pred}|
\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mae = np.<span class="built_in">sum</span>(np.absolute(y_pred - y_true)) / <span class="built_in">len</span>(y_true)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error</span><br><span class="line">mae = mean_absolute_error(y_true,y_pred)</span><br></pre></td></tr></table></figure>
<h2 id="r方r-squared">R方（R-Squared）</h2>
<p><span class="math display">\[
R^2=1-\frac{\sum_i(y^i_{pred}-y^i_{true})^2}{\sum_i(y^i_{true}-\bar{y})^2}
\]</span></p>
<p>含义：预测值对于真值的拟合好坏程度，<span class="math inline">\(R^2\in(-\infty,1]\)</span></p>
<ul>
<li>R方=1，所有预测值=真值</li>
<li>R方=0，可能”所有预测值等于真值平均“</li>
<li>R方&lt;0，终究是错付了</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R2 = <span class="number">1</span> - mse / np.var(y_true)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br><span class="line">R2 = r2_score(y_true,y_pred)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python深度学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>回归问题</tag>
        <tag>模式识别</tag>
      </tags>
  </entry>
  <entry>
    <title>模型训练可视化工具——TensorboardX</title>
    <url>/2021/06/29/Python%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94TensorboardX/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>模型训练可视化工具——TensorboardX</p>
<span id="more"></span>
<h2 id="安装">安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install tensorboardX</span><br><span class="line">$ pip install tensorboard</span><br><span class="line"><span class="comment"># 使用GPU的情况下，需要安装</span></span><br><span class="line">$ pip install tensorflow-gpu==2.3.0</span><br></pre></td></tr></table></figure>
<p>版本需要和cuda版本一致，否则报cudart64_110.dll not found错误</p>
<p>https://blog.csdn.net/weixin_42764932/article/details/113038416</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看TensorFlow版本：</span></span><br><span class="line">$ python</span><br><span class="line">$ import tensorflow as tf</span><br><span class="line">$ tf.__version__</span><br></pre></td></tr></table></figure>
<h2 id="使用">使用</h2>
<p>在与<code>runs</code>同级目录下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tensorboard --logdir runs</span><br></pre></td></tr></table></figure>
<h2 id="更多教程">更多教程</h2>
<p>https://www.jianshu.com/p/46eb3004beca</p>
<p>https://blog.csdn.net/bigbennyguo/article/details/87956434</p>
]]></content>
      <categories>
        <category>Python深度学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>回归问题</tag>
        <tag>模式识别</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda相关</title>
    <url>/2021/06/29/Python%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3/Anaconda%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p><strong>The only problem with Microsoft is they just have no taste, they have absolutely no taste.</strong></p>
<footer><strong>Steve Jobs</strong></footer></blockquote>
<span id="more"></span>
<h2 id="anaconda安装后无法打开jupyter-notebookjupyter-lab">Anaconda安装后无法打开Jupyter Notebook、Jupyter Lab</h2>
<h4 id="正常安装anaconda">1. 正常安装Anaconda</h4>
<ul>
<li>安装路径不可有中文</li>
<li>安装可选择所有人</li>
<li>安装文件夹自定义命名（避免版本升级或重装出错）</li>
</ul>
<h4 id="将安装路径添加到path">2. 将安装路径添加到PATH</h4>
<p>我的电脑右键——属性——高级系统设置——高级——环境变量——Path，添加：</p>
<ul>
<li>C:20210328</li>
<li>C:20210328</li>
</ul>
<h4 id="使用">3. 使用：</h4>
<ul>
<li>文件路径下——命令提示符</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> jupyter notebook</span><br><span class="line"><span class="variable">$</span> jupyter lab</span><br></pre></td></tr></table></figure>
<ul>
<li>复制 <code>http://localhost:8888/?token=xxxx</code>到浏览器打开</li>
</ul>
<h2 id="jupyter-notebook错误ipykernel_launcher.py-error">Jupyter Notebook错误“ipykernel_launcher.py: error”</h2>
<p>参考：https://blog.csdn.net/weixin_41693877/article/details/109549914</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 报错语句：</span></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="comment"># 修改为：</span></span><br><span class="line">args = parser.parse_known_args()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Python</tag>
        <tag>Anaconda</tag>
        <tag>Jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>Python报错总结</title>
    <url>/2021/06/29/Python%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3/Python%E6%8A%A5%E9%94%99%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Python报错总结</p>
<span id="more"></span>
<h2 id="unicodedecodeerror-utf-8-codec-cant-decode-byte-0x80-in-position-3131-invalid-start-byte解决办法">1. UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 3131: invalid start byte解决办法</h2>
<p>【问题描述】Mac OS上使用Python3读取文件过程中出现了UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 3131: invalid start byte情况。</p>
<p>【原因】OS X系统在文件夹中存在隐藏文件.DS_Store文件，影响了文件读取。（.DS_Store是macOS文件目录中的隐藏文件，保存着文件夹的自定义属性，如文件的图标、位置、背景色等。）</p>
<p>【解决办法】删除.DS_Store文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看.DS_Store文件</span></span><br><span class="line">$ ls -a</span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">$ rm .DS_Store</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Python</tag>
        <tag>Error</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下Pycharm使用Ubuntu虚拟环境</title>
    <url>/2021/06/26/Python%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3/Windows%E4%B8%8BPycharm%E4%BD%BF%E7%94%A8Ubuntu%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/Windows%E4%B8%8BPycharm%E4%BD%BF%E7%94%A8Ubuntu%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83.png"></p>
<span id="more"></span>
<p>Windows下Ubuntu子系统安装参考：</p>
<h2 id="一ubuntu配置">一、Ubuntu配置</h2>
<h3 id="更新包">1. 更新包</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure>
<h3 id="修改ssh配置">2. 修改ssh配置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo dpkg-reconfigure openssh-server</span><br><span class="line">$ sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Port 22</span></span><br><span class="line">Port 555</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># PasswordAuthentication no</span></span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure>
<h3 id="启动ssh">3. 启动ssh</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo service ssh --full-restart</span><br></pre></td></tr></table></figure>
<h3 id="安装anaconda">4. 安装Anaconda</h3>
<ul>
<li><p>打开Anaconda网站：<a href="https://www.anaconda.com/products/individual#Downloads">Anaconda | Individual Edition</a></p></li>
<li>下载 “64-Bit (x86) Installer (544 MB)”</li>
<li><p>将 <code>Anaconda3-2021.05-Linux-x86_64.sh</code> 移动到<code>C:\Users\用户名</code></p></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bash Anaconda3-2021.05-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>
<p>新开一个Terminal</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看conda版本</span></span><br><span class="line">$ conda -V</span><br><span class="line"><span class="comment"># 查看pip版本</span></span><br><span class="line">$ pip -V</span><br></pre></td></tr></table></figure>
<h3 id="修改镜像源">5. 修改镜像源</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo nano ~/.condarc</span><br></pre></td></tr></table></figure>
<p>修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure>
<h3 id="取消自动进入base环境">6. 取消自动进入base环境</h3>
<p>Ubuntu安装Anaconda后，每次终端启动都会进入base环境。退出conda命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda deactivate</span><br></pre></td></tr></table></figure>
<p>上述命令需要每次执行，可添加配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda config --<span class="built_in">set</span> auto_activate_base <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="新建环境">7. 新建环境</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda create -n <span class="built_in">test</span> python=3.9</span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line">$ conda activate <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">$ conda deactivate</span><br></pre></td></tr></table></figure>
<h2 id="二pycharm配置">二、Pycharm配置</h2>
<h3 id="测试">1. 测试</h3>
<p>打开Pycharm终端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh ubuntu用户名@127.0.0.1 -p 555</span><br></pre></td></tr></table></figure>
<h3 id="配置">2. 配置</h3>
<ul>
<li><p>Tools——Deployment——Configuration——增加SFTP连接</p></li>
<li>New server name——起个名</li>
<li>SSH configuration——右侧三个点
<ul>
<li>Host：127.0.0.1Port：555</li>
<li>User name：Ubuntu用户名</li>
<li>Authentication type：Password</li>
<li>Password：Ubuntu密码</li>
<li>点击Test Connection测试一下连接</li>
</ul></li>
<li><p>SSH configuration——选择刚刚创建的连接——OK</p></li>
</ul>
<h3 id="新建工程">3. 新建工程</h3>
<ul>
<li>File——New Project</li>
<li>Pure Python
<ul>
<li>Location：起个名</li>
<li>勾选：Previously configured interpreter</li>
</ul></li>
<li>Interpreter右侧...
<ul>
<li>选择：SSH Interpreter</li>
<li>Host：127.0.0.1</li>
<li>Port：555</li>
<li>Username：用户名</li>
</ul></li>
<li>Next
<ul>
<li>Password：密码</li>
</ul></li>
<li>Next
<ul>
<li>Interpreter：/home/用户名/anaconda3/envs/test/bin/python</li>
</ul></li>
</ul>
<h2 id="三结语">三、结语</h2>
<p>emmmmm。。。。。</p>
<ul>
<li>好像直接执行程序是不能用的T.T</li>
<li>在Pycharm的Terminal里面执行 <code>python main.py</code> 可以执行</li>
<li>最后，也没发现这种方法对现在的工作有啥用。。哈哈。。。</li>
</ul>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/049FD363.png"></p>
]]></content>
      <categories>
        <category>Pycharm</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Python</tag>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>解决PyCharm安装慢问题</title>
    <url>/2022/01/04/Python%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3/%E8%A7%A3%E5%86%B3PyCharm%E5%AE%89%E8%A3%85%E6%85%A2%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>问题描述：使用PyCharm中pip安装包时特别慢。</p>
<p>解决方法：换成国内镜像源</p>
</blockquote>
<span id="more"></span>
<h3 id="方案一指定镜像地址">方案一：指定镜像地址</h3>
<p><code>pip</code> 命令中添加 <code>-i</code> 参数指定镜像地址，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install xxx -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<p>其他可用镜像地址包括：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清华镜像站</span></span><br><span class="line">https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="comment"># 中科大镜像站</span></span><br><span class="line">https://pypi.mirrors.ustc.edu.cn/simple</span><br><span class="line"><span class="comment"># 豆瓣镜像站</span></span><br><span class="line">http://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure>
<h3 id="方案二pycharm中添加国内镜像站">方案二：PyCharm中添加国内镜像站</h3>
<p>第一步，PyCharm——File——Settings——定位到工程“Project：xxxx”——Project Interpreter——点击加号</p>
<figure>
<img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20220104013154363.png" alt="image-20220104013154363"><figcaption>image-20220104013154363</figcaption>
</figure>
<p>第二步，点击Manage Repositories</p>
<figure>
<img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20220104013242169.png" alt="image-20220104013242169"><figcaption>image-20220104013242169</figcaption>
</figure>
<p>第三步，添加镜像源</p>
<h3 id="方案三全局-pip-配置">方案三：全局 <code>pip</code> 配置</h3>
<p>Windows下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建文件并编辑 C:\Users\xxx\pip\pip.ini</span></span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>
<p>Linux/MacOS下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建文件并编辑 ~/.pip/pip.conf</span></span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>
<h3 id="参考">参考：</h3>
<blockquote>
<p>[1] <a href="https://www.runoob.com/w3cnote/pip-cn-mirror.html">pip 使用国内镜像源, RUNOOB.COM</a></p>
<p>[2] <a href="https://blog.csdn.net/weixin_43954778/article/details/89821988">PyCharm解决安装慢的问题 更换pip源为国内源, CSDN, 魏有心</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Pycharm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>Python串口通信</title>
    <url>/2021/06/29/Python%E7%A1%AC%E4%BB%B6%E7%BC%96%E7%A8%8B/Python%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="安装serial模块">安装Serial模块</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install serial</span><br><span class="line">$ pip install pyserial</span><br></pre></td></tr></table></figure>
<h2 id="安装串口驱动">安装串口驱动</h2>
<p>驱动程序：PL2303HXD_G_Driver_v2.0.0_20191112.pkg</p>
<p>串口消失，重新安装CH340驱动并重启：CH34x_Install_V1.5.pkg</p>
<h2 id="查看串口号">查看串口号</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Windows下</span></span><br><span class="line"><span class="comment"># 设备管理器中查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mac/Linux下</span></span><br><span class="line">$ <span class="built_in">cd</span> /dev</span><br><span class="line">$ ls tty.*</span><br></pre></td></tr></table></figure>
<h2 id="常见用法">常见用法</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开第一个串口</span></span><br><span class="line">my_serial = serial.Serial(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 设置串口地址、波特率</span></span><br><span class="line">my_serial = serial.Serial(‘COM1’, <span class="number">115200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看串口标识</span></span><br><span class="line"><span class="built_in">print</span>(my_serial.portstr) </span><br><span class="line"><span class="comment"># 串口是否打开</span></span><br><span class="line">ser.isOpen()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开串口</span></span><br><span class="line">my_serial.<span class="built_in">open</span>() </span><br><span class="line"><span class="comment"># 关闭串口</span></span><br><span class="line">my_serial.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 串口写数据</span></span><br><span class="line">my_serial.write(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment"># 串口读数据</span></span><br><span class="line">data = my_serial.read() <span class="comment"># 读一个字符</span></span><br><span class="line">data = my_serial.read(<span class="number">20</span>) <span class="comment"># 读20个字符</span></span><br><span class="line">data = my_serial.readline() <span class="comment"># 读一行，读至/n</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Pyhton硬件编程</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Python</tag>
        <tag>硬件编程</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS下Arduino编程</title>
    <url>/2021/06/29/Python%E7%A1%AC%E4%BB%B6%E7%BC%96%E7%A8%8B/macOS%E4%B8%8BArduino%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="软件安装官网">1. 软件安装，官网</h4>
<h4 id="库文件使用">2. 库文件使用</h4>
<p>应用程序——Arduino——显示包内容——Contents——Java——libraries，将库文件夹移动到这里</p>
<h4 id="查看串口地址">3. 查看串口地址</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls /dev/cu.usbserial-*</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>硬件编程</tag>
        <tag>C/C++</tag>
        <tag>Ardunio</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下Ubuntu子系统配置</title>
    <url>/2021/07/11/Windows%E7%9B%B8%E5%85%B3/Windows%E4%B8%8BUbuntu%E5%AD%90%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/Windows%E4%B8%8BUbuntu%E5%AD%90%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE.png"></p>
<span id="more"></span>
<h2 id="一预先操作">一、预先操作</h2>
<ul>
<li>Windows下：设置——应用——应用和功能——程序或功能——启用或关闭Windows功能——勾选“适用于Linux的Windows子系统”——重启</li>
</ul>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20210626183417980.png" alt="image-20210626183417980" style="zoom:50%;"></p>
<ul>
<li>Windows下：Microsoft Store——安装Ubuntu20.04 LTS</li>
</ul>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20210626183718148.png" alt="image-20210626183718148" style="zoom: 33%;"></p>
<ul>
<li>Windows下：Microsoft Store——安装Windows Terminal</li>
</ul>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20210626183628209.png" alt="image-20210626183628209" style="zoom:33%;"></p>
<h2 id="二ubuntu配置">二、Ubuntu配置</h2>
<h3 id="启动ubuntu20.04-lts初始设置设置用户名和密码其他会自动完成">1. 启动Ubuntu20.04 LTS，初始设置（设置用户名和密码，其他会自动完成）</h3>
<h3 id="启动windows-terminal">2. 启动Windows Terminal</h3>
<ul>
<li>设置默认开启Ubuntu：顶栏下三角——设置——启动——默认配置文件——选择Ubuntu</li>
<li>美化：配置文件——Ubuntu——外观——随喜好设置</li>
</ul>
<h3 id="修改清华镜像源">3. 修改清华镜像源</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>使用#注释掉原来的镜像，添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p>
<h2 id="三linux子系统文件结构">三、Linux子系统文件结构</h2>
<p>打开Terminal时，显示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mastermao@MasterMao:/mnt/c/Users/MasterMao$</span><br></pre></td></tr></table></figure>
<p>很明显，当前目录是挂载点，位置是C盘用户名下，和Ubuntu用户目录是不同的。</p>
<p>返回根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>
<p>这意味着，当配置github或者coding的ssh时，正确目录应该是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Win 10</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows美化</title>
    <url>/2021/06/29/Windows%E7%9B%B8%E5%85%B3/Windows%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="占坑...">占坑...</h2>
<span id="more"></span>
<p>https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1296297&amp;ctid=1853</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>win10修复</title>
    <url>/2021/06/25/Windows%E7%9B%B8%E5%85%B3/Windows%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p><strong>The only problem with Microsoft is they just have no taste, they have absolutely no taste.</strong></p>
<footer><strong>Steve Jobs</strong></footer></blockquote>
<span id="more"></span>
<h2 id="win10开始菜单磁贴只有背景">win10开始菜单磁贴只有背景</h2>
<p>解决办法：重启explorer</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> taskkill /f /im explorer.exe</span><br><span class="line"><span class="variable">$</span> <span class="built_in">start</span> explorer</span><br></pre></td></tr></table></figure>
<h2 id="wordppt等拖动闪退">Word、PPT等拖动闪退</h2>
<p>解决办法：禁用硬件加速</p>
<p><strong>方法一：GUI里关闭硬件加速</strong></p>
<p>文件——选项——高级——禁用硬件加速</p>
<p><strong>方法二：修改注册表</strong></p>
<ul>
<li><p>Win+R——打开regedit</p></li>
<li><p>找到 HKEY_CURRENT_USER\16.0</p></li>
<li><p>新建——项——命名 Graphics</p></li>
<li><p>Graphics——新建——DWORD值——DisableHardwareAcceleration</p></li>
<li><p>DisableHardwareAcceleration双击——0改为1</p></li>
</ul>
<h2 id="chrome系浏览器打开全黑">Chrome系浏览器打开全黑</h2>
<p>解决方法：关闭硬件加速</p>
<ul>
<li>属性——快捷方式——目标——添加“ --disable-gpu --disable-software-rasterize”</li>
</ul>
]]></content>
      <categories>
        <category>Win 10</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>个人常用软件分享</title>
    <url>/2021/06/29/%E5%88%86%E4%BA%AB/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>软件分享</p>
<span id="more"></span>
<p><strong>个人长期实践过程中总结的好用的软件汇总</strong></p>
<h2 id="一网盘类软件">一、网盘类软件</h2>
<h3 id="天翼云">1. *天翼云</h3>
<ul>
<li>优点：容量大、不限速</li>
<li>缺点：资源少，虽然有些网站已经开始用天翼云分享资源，但是依旧是少数</li>
</ul>
<h3 id="阿里云盘">2. 阿里云盘</h3>
<ul>
<li>优点：容量大不限速</li>
<li>缺点：资源少，因为刚出，资源比较少，可以看到的是，吾爱破解上已经出现百度网盘转存阿里云盘的脚本，虽然是边下边上传。。。百度网盘被取代是大势所趋！！</li>
</ul>
<h2 id="二同步盘类软件">二、同步盘类软件</h2>
<h3 id="坚果云">1. *坚果云</h3>
<ul>
<li>优点：同步速度快、可以 <strong>回溯历史版本</strong>（这个功能超级好）</li>
<li><p>缺点：每个月1G免费上传，3G免费下载，仅仅同步文档是够用的</p></li>
<li><p>官方网站：https://www.jianguoyun.com</p></li>
</ul>
<p><strong><em>Tips：</em>万一真的不够用的话：</strong></p>
<ul>
<li>多申请几个号</li>
</ul>
<p><strong><em>Tips：</em>不想多个号换来换去：</strong></p>
<ul>
<li>将坚果云使用WebDAV协议挂载到本地，有很多可用软件，如Windows下RaiDrive、Mac下ExpanDrive</li>
</ul>
<blockquote>
<p>“用了你说的坚果云，根本停不下来” <em>——涛涛</em></p>
</blockquote>
<h3 id="天翼云-1">2. 天翼云</h3>
<ul>
<li>优点：容量大，网盘剩多大，就能同步多大；不限速</li>
<li>缺点：貌似只有上传下载功能，对文件改动不敏感</li>
</ul>
<h3 id="onedrive">3. OneDrive</h3>
<ul>
<li>优点：容量大、微软系软件支持好（主要用来同步OneNote）</li>
<li>缺点：慢，改Hosts效果也不好</li>
</ul>
<h2 id="三下载类软件">三、下载类软件</h2>
<h3 id="idm">1. *IDM</h3>
<ul>
<li>非官方网站：https://www.ghpym.com/pcidm.html</li>
</ul>
<h3 id="motrix">2. Motrix</h3>
<ul>
<li>优点：下载种子类文件较好，可用来替代迅雷</li>
<li>缺点：对于PT站类的种子就没什么优势，还是qbittorrent、utorrent之类的好用</li>
<li>官方网站：https://motrix.app</li>
</ul>
<h3 id="黑科下载器">3. 黑科下载器 💀</h3>
<ul>
<li>已死，纪念一下</li>
<li>很好用的软件，能达到10MB/s的下载速度，一个4G的视频，分分钟下载完</li>
</ul>
<h2 id="四流程图软件">四、流程图软件</h2>
<h3 id="draw.io">*Draw.io</h3>
<ul>
<li>开源，全平台，尺寸、箭头控制简单</li>
<li>网站：github</li>
<li>下载站：https://draw-io.en.softonic.com</li>
</ul>
<h2 id="五思维导图软件">五、思维导图软件</h2>
<h3 id="xmind">*XMind</h3>
<ul>
<li>多平台支持，简单易用</li>
<li>非官方网站：https://www.ghpym.com/xmind2021.html</li>
</ul>
<h2 id="六音乐软件">六、音乐软件</h2>
<h3 id="酷我音乐">*酷我音乐</h3>
<ul>
<li>非官方网站：https://www.ghpym.com/kwmusic.html</li>
</ul>
<h3 id="yesplaymusic">YesPlayMusic</h3>
<ul>
<li>开源软件</li>
<li>网址：https://github.com/qier222/YesPlayMusic/</li>
</ul>
<h2 id="七视频软件">七、视频软件</h2>
<h3 id="zy-player">*ZY player</h3>
<ul>
<li><p>全网视频</p></li>
<li><p>网址：https://github.com/Hunlongyu/ZY-Player</p></li>
</ul>
<h2 id="八英雄联盟换肤">八、英雄联盟换肤</h2>
<h3 id="lol-skin-pro">*LOL Skin Pro</h3>
<ul>
<li>网站：http://leagueskin.net/p/download-mod-skin-2020-chn</li>
</ul>
<h2 id="九markdown软件">九、Markdown软件</h2>
<h3 id="typora">*Typora</h3>
<ul>
<li><p>支持<strong>实时预览</strong>的Markdown文本编辑器，支持OS X、Windows、Linux</p></li>
<li><p>官网：https://www.typora.io/</p></li>
<li><p>入门：https://sspai.com/post/54912/</p></li>
<li><p>必改设置：</p>
<p>文件——偏好设置</p></li>
<li><ul>
<li>通用——勾选 自动保存</li>
<li>编辑器——勾选 匹配括号和引号、匹配Markdown字符</li>
<li>图像——选择 复制图片到./${filename}.assets 文件夹；勾选 对本地位置的图片应用上述规则、对网络位置的图片应用上述规则、优先使用相对路径（复制移动.md文件时，把xxx.md和xxx.assets文件夹一起复制或移动）</li>
</ul></li>
<li><ul>
<li>Markdown——勾选 内联公式</li>
</ul></li>
<li><p>文件导出——导出Word需要安装pandc插件，但是导出的文档真的丑</p></li>
</ul>
<h3 id="mweb">MWeb</h3>
<ul>
<li>仅支持OS X、IOS</li>
<li>源码-预览对比模式</li>
<li>有图片拼接功能，写博客、课程作业利器，还可以推送到语雀、印象笔记等平台</li>
</ul>
<h2 id="十电子笔记软件">十、电子笔记软件</h2>
<h3 id="onenote">OneNote</h3>
<ul>
<li>优点：表格嵌套、iPad手写、文件存储方便、空间大</li>
<li>缺点：同步慢</li>
</ul>
<h3 id="印象笔记">印象笔记</h3>
<ul>
<li>优点：支持Markdown、支持block块、同步快</li>
<li>缺点：空间受限、<strong>UI丑</strong></li>
</ul>
<h3 id="notion">Notion</h3>
<ul>
<li>优点：功能强大</li>
<li>缺点：服务器在国外，加载慢；内存占用高；有上手难度</li>
</ul>
<h3 id="语雀">语雀</h3>
<ul>
<li>优点：多平台、支持block块、速度快、容量大</li>
<li>客户端丑；不支持纯Markdown；字间距、行间距丑</li>
</ul>
<h3 id="我来">我来</h3>
<ul>
<li>优点：抄袭Notion</li>
<li>缺点：笔记内容受监管</li>
</ul>
<h3 id="幕布">幕布</h3>
<ul>
<li>思维导图与大纲笔记互转</li>
<li>收费收费收费</li>
</ul>
<h3 id="有道云笔记为知笔记">有道云笔记、为知笔记</h3>
<ul>
<li>功能少，没咋用过</li>
</ul>
]]></content>
      <categories>
        <category>资源分享</category>
      </categories>
      <tags>
        <tag>资源分享</tag>
        <tag>英雄联盟</tag>
      </tags>
  </entry>
  <entry>
    <title>美图秀秀开启高DPI</title>
    <url>/2021/12/26/Windows%E7%9B%B8%E5%85%B3/%E7%BE%8E%E5%9B%BE%E7%A7%80%E7%A7%80%E9%AB%98DPI/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>使用2K、4K屏幕时，类似美图秀秀、央视影音这种软件显示的非常小，原因是没有适配高DPI，可以手动开启。</p>
</blockquote>
<span id="more"></span>
<p>快捷方式——右键“属性”——兼容性——更改高DPI设置——高DPI缩放替代——勾选替代高DPI缩放行为——缩放执行选择“系统（增强）”</p>
<figure>
<img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/image-20211217185849972.png" alt="image-20211217185849972"><figcaption>image-20211217185849972</figcaption>
</figure>
]]></content>
      <categories>
        <category>Win 10</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>网站分享</title>
    <url>/2021/06/29/%E5%88%86%E4%BA%AB/%E7%BD%91%E7%AB%99%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>网站分享</p>
<span id="more"></span>
<h2 id="软件下载网站">软件下载网站</h2>
<h4 id="腾讯软件中心">腾讯软件中心：</h4>
<h4 id="pc6httpwww.pc6.com">PC6：http://www.pc6.com/</h4>
<h2 id="绿化组织网站">绿化组织网站</h2>
<h4 id="果核剥壳httpswww.ghpym.com">果核剥壳https://www.ghpym.com/</h4>
<h4 id="黑域基地httpwww.hackhw.com">黑域基地：http://www.hackhw.com/</h4>
<h2 id="bt搜索">BT搜索</h2>
<h4 id="btsowhttpstellme.pwbts">BTSOW：https://tellme.pw/bts</h4>
]]></content>
      <categories>
        <category>资源分享</category>
      </categories>
      <tags>
        <tag>资源分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Crush摄影</title>
    <url>/2021/07/03/%E6%91%84%E5%BD%B1/Crush%E6%91%84%E5%BD%B1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/%E5%BD%BC%E5%A5%B3%E3%81%AE%E6%97%A5%E5%B8%B8.png"></p>
<span id="more"></span>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/crush1.jpg"></p>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/crush2.jpg"></p>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/crush3.jpg"></p>
<p><img data-src="https://my-gallery-1306340269.cos.ap-beijing.myqcloud.com/mastermao/crush4.jpg"></p>
]]></content>
      <tags>
        <tag>摄影</tag>
        <tag>Crush</tag>
      </tags>
  </entry>
  <entry>
    <title>修复4K屏幕下《英雄联盟》指针过小问题</title>
    <url>/2021/06/01/%E8%8B%B1%E9%9B%84%E8%81%94%E7%9B%9F/%E4%BF%AE%E5%A4%8D4K%E5%B1%8F%E5%B9%95%E4%B8%8B%E8%8B%B1%E9%9B%84%E8%81%94%E7%9B%9F%E6%8C%87%E9%92%88%E8%BF%87%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>4K屏幕下，《英雄联盟》鼠标指针小的可怜，经常对线时找不到指针、打团找不到指针、补兵找不到指针、商店购物发现钱不够（啊，不是）</p>
</blockquote>
<blockquote>
<p>本教程将《英雄联盟》游戏中鼠标指针放大</p>
</blockquote>
<span id="more"></span>
<p><strong>第一步</strong>，打开 <code>英雄联盟/Game/Config/game.cfg</code>，添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[General]</span><br><span class="line">+ CursorOverride=0</span><br><span class="line">+ CursorScale=3.0000</span><br></pre></td></tr></table></figure>
<p><code>CursorScale</code> 控制放大倍数，<code>3.0000</code> 表示放大到 <code>300%</code></p>
<p><strong>第二步</strong>，打开 <code>英雄联盟/Game/Config/PersistedSettings.json</code> ，修改：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CursorOverride&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CursorScale&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;3.0000&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>第三步</strong>，设置 <code>英雄联盟/Game/Config/PersistedSettings.json</code> 文件为<strong>只读</strong>文件</p>
<p><strong>finally</strong>，enjoy！</p>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>英雄联盟</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>联想Y50-70更换BCM94352z无线网卡</title>
    <url>/2021/06/29/%E9%BB%91%E8%8B%B9%E6%9E%9C/%E8%81%94%E6%83%B3Y50-70%E6%9B%B4%E6%8D%A2BCM94352z%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>联想Y50-70更换BCM94352z无线网卡</p>
<span id="more"></span>
<p>第一步，下单</p>
<p>第二步，拆机安装</p>
<p>第三步，出现错误 unauthorized wireless network card is plugged in</p>
<p><strong>解决方法：去除BIOS无线网卡白名单</strong></p>
<h2 id="一准备工作">一、准备工作</h2>
<h4 id="工具">1. 工具</h4>
<p>修改BIOS的软件、BIOS文件等https://cloud.189.cn/t/36zauuvAnYZj（访问码：il7a）</p>
<h4 id="升级bios可跳过">2. 升级BIOS（可跳过）</h4>
<p>找到合适版本的BIOS点击安装（推荐1.14版本以下的BIOS）</p>
<h4 id="备份bios">3. 备份BIOS</h4>
<ul>
<li>升级后重启，在BIOS中升级，再进行备份</li>
<li>开机，管理员权限执行fptw64中的backup.exe，生成bios_bak.bin</li>
</ul>
<h2 id="二删除白名单">二、删除白名单</h2>
<ul>
<li>EzH2O载入BIOS备份（bios_bak.bin）</li>
<li>选择 组件-模块-删除现有的模块</li>
<li>选择 GUID-“11D378C2-B472-412F-AD87-1BE4CD8B33A6”-修补</li>
<li>选择 文件-保存</li>
</ul>
<h2 id="三刷入">三、刷入</h2>
<ul>
<li><p>插入U盘，管理员权限运行rufus，点击运行，制作U盘启动盘</p></li>
<li>将fpt文件夹复制到U盘根目录</li>
<li>将修改后的BIOS文件复制到U盘根目录，改名为<code>1.bin</code></li>
<li>重启进入BIOS，设置Legacy Support，保存退出</li>
<li>重启F12选择DOS系统，显示<code>C:&gt;</code></li>
<li>输入<code>cd fpd</code>，回车</li>
<li>输入<code>prr</code>，回车</li>
<li><p>输入<code>fpt -f 1.bin -bios</code>，回车</p></li>
</ul>
<h2 id="四重启">四、重启</h2>
]]></content>
      <categories>
        <category>黑苹果</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>使用技巧</tag>
        <tag>黑苹果</tag>
      </tags>
  </entry>
  <entry>
    <title>黑苹果安装 &amp; 使用问题总结</title>
    <url>/2021/06/29/%E9%BB%91%E8%8B%B9%E6%9E%9C/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>本文总结了黑苹果安装和使用过程中遇到的问题，安装问题与安装主机的 CPU 型号有关，使用问题是 macOS 通用的。</p>
</blockquote>
<span id="more"></span>
<h2 id="壹丨安装问题安装过程卡加号">壹丨【安装问题】安装过程卡加号</h2>
<h4 id="原因">原因：</h4>
<p>drivers64UEFI 里的一个 efi 文件有问题</p>
<h4 id="解决方法">解决方法：</h4>
<p>第一步，<code>/EFI/CLOVER/drivers64UEFI/</code> 下</p>
<ul>
<li>删除 <code>OsxAptioFix2Drv-64.efi</code></li>
<li>删除 <code>OsxLowMemFixDrv-64.efi</code></li>
</ul>
<p>第二步，<code>config.plist</code> 中删掉 <code>slide=XXX</code></p>
<p>第三步，如果仍旧无法启动, 表明内核请求分配的空间仍旧太大：</p>
<ul>
<li>将 <code>CsrActiveConfig</code> 设置成 <code>0x67</code></li>
</ul>
<h2 id="贰丨安装问题正常安装完成后开机出现死循环报错amfidenying-core-dump-for-pid-too-many-corpses-being-created">贰丨【安装问题】正常安装完成后开机出现死循环，报错：AMFI:Denying core dump for pid *** too many corpses being created</h2>
<h4 id="解决方法-1">解决方法：</h4>
<p>第一步，第一次重启安装后，一直进入 <code>preboot</code> 来安装，会重启几次，安装完成后可以进入系统，但只能从 <code>preboot</code> 进入</p>
<p>第二步，在 <code>config.plist</code> 中把以下这段删除（不隐藏 <code>preboot</code>）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;</span><br><span class="line">	Hide</span><br><span class="line">&lt;/key&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">	&lt;string&gt;</span><br><span class="line">		Preboot</span><br><span class="line">	&lt;/string&gt;</span><br><span class="line">&lt;/array&gt;</span><br></pre></td></tr></table></figure>
<h2 id="叁丨安装问题-xxx-安装副本损坏">叁丨【安装问题】“ xxx 安装副本损坏”</h2>
<h4 id="解决方法-2">解决方法：</h4>
<p>终端修改 date</p>
<blockquote>
<p>PS：实践发现，每次使用不同安装包修改的 date 是不同的，但规律是修改到一年前的此时此刻。</p>
</blockquote>
<h2 id="肆丨安装问题睡眠睡死取消睡眠后自动重启">肆丨【安装问题】睡眠睡死、取消睡眠后自动重启</h2>
<h4 id="解决方法-3">解决方法：</h4>
<p>定制 USB</p>
<p>参考：https://blog.csdn.net/LeoForBest/article/details/103247824</p>
<h2 id="伍丨使用问题xxx-is-not-in-the-sudoers-file.-this-incident-will-be-reported.">伍丨【使用问题】xxx is not in the sudoers file. This incident will be reported.</h2>
<h4 id="问题描述">问题描述：</h4>
<p>Linux或Mac中，使用sudo命令，提示“xxx is not in the sudoers file. This incident will be reported.”</p>
<h4 id="解决方法-4">解决方法：</h4>
<p>修改/etc/sudoers文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加文件写权限</span></span><br><span class="line">$ sudo chmod u+w /etc/sudoers</span><br><span class="line"><span class="comment"># 编辑/etc/sudoers文件</span></span><br><span class="line">$ nano /etc/sudoers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改如下内容：</span></span><br><span class="line">root ALL=(ALL) ALL</span><br><span class="line">xxx ALL=(ALL) ALL <span class="comment"># xxx是用户名</span></span><br><span class="line"><span class="comment"># ctrl+x、y、回车</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销文件写权限</span></span><br><span class="line">sudo chmod u-w /etc/sudoers</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>黑苹果</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>黑苹果</tag>
      </tags>
  </entry>
  <entry>
    <title>黑苹果安装流程总结</title>
    <url>/2021/06/29/%E9%BB%91%E8%8B%B9%E6%9E%9C/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>2020 年 7 月 19 日凌晨，把最后一台黑苹果完善，发誓再也不倒腾黑苹果了，累了。这种累不仅仅是因为要漫天找教程，更多的是因为硬件的局限性，不得不想尽办法找驱动、做取舍。</p>
</blockquote>
<blockquote>
<p>本文记录了 5 台主机黑苹果安装过程</p>
</blockquote>
<span id="more"></span>
<p>## 壹丨前言</p>
<p>黑苹果安装简单，难在驱动。在装了很多次后发现，一个好的安装包可以为装驱动省去很多麻烦。</p>
<p>目前个人感觉 <code>macOS Catalina</code> 系统安装最好用的安装包是：<code>黑果小兵 macOS Catalina 10.15.4(19E2269) Installer for Clover 5116 and WEPE.dmg</code>，其他的安装包，即便也是来自黑果小兵网站，还是不如这个安装包好用。</p>
<p>至于 <code>macOS Bigsur</code> 系统，只装过两次，安装成功后没及时记录，用的哪个安装包，忘了。</p>
<h2 id="贰丨驱动安装">贰丨驱动安装</h2>
<p>系统安装流程不再赘述，按照指示安装即可，下面主要讲驱动安装问题。</p>
<h4 id="联想-y50---70">1. 联想 Y50 - 70</h4>
<p>参考：https://www.tonymacx86.com/threads/guide-lenovo-y50-uhd-or-1080p-using-clover-uefi.261723/</p>
<p>第一步，安装 Xcode</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ xcode-select --install</span><br></pre></td></tr></table></figure>
<p>第二步，克隆 git 仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir ~/Projects</span><br><span class="line">$ <span class="built_in">cd</span> ~/Projects</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/RehabMan/Lenovo-Y50-DSDT-Patch y50.git</span><br></pre></td></tr></table></figure>
<p>第三步，驱动安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/Projects/y50.git</span><br><span class="line">$ ./download.sh</span><br><span class="line">$ ./install_downloads.sh</span><br></pre></td></tr></table></figure>
<p>第四步，编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/Projects/y50.git</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>
<p>第五步，修复休眠</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pmset -a hibernatemode 0</span><br><span class="line">$ sudo rm /var/vm/sleepimage</span><br><span class="line">$ sudo mkdir /var/vm/sleepimage</span><br></pre></td></tr></table></figure>
<p>第六步，移动到 EFI 分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/Projects/y50.git</span><br><span class="line">$ ./mount_efi.sh</span><br><span class="line">$ <span class="built_in">cd</span> ~/Projects/y50.git</span><br><span class="line">$ cp config.plist /Volumes/EFI/EFI/Clover/config.plist</span><br><span class="line"><span class="comment"># 如果为4K屏幕</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/Projects/y50.git</span><br><span class="line">$ cp config_UHD.plist /Volumes/EFI/EFI/Clover/config.plist</span><br></pre></td></tr></table></figure>
<p>Final，后续升级</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/Projects/y50.git</span><br><span class="line">$ git pull</span><br><span class="line">$ ./download.sh</span><br><span class="line">$ ./install_downloads.sh</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>
<h3 id="samsung-270e5k">2. Samsung 270E5K</h3>
<p>一款 2015 年左右上市的三星笔记本，使用 5 代 i5 ，独立显卡是 NVIDIA GeForce 920M，据说 920 显卡是开普勒架构，愚以为开普勒架构的 N 卡都可以免驱，安装 macOS 10.13.6 及以前的版本，不断地装机、爬贴，发现 WebDriver 无法驱动？？</p>
<p>后来查到，920M 是 GK208 核心，没法驱动！！</p>
<p>另外，macOS 10.13.6 是真的老了，有效的资料太少！！</p>
<h3 id="intel-8500华硕xx主板">3. Intel 8500+华硕xx主板</h3>
<ul>
<li>主板只有VGA，在硬件底层就已经被MacOS砍掉了</li>
<li>虽然据说是主板上的DP口改出来的VGA，but，最终还是没装上</li>
</ul>
<h3 id="intel-9700华硕prime-b365m-k主板只有dvi和vga">4. Intel 9700+华硕Prime B365M-K（主板只有DVI和VGA）</h3>
<h4 id="显卡驱动">显卡驱动：</h4>
<ul>
<li>安装完成后，核显没驱动，DVI正常输出，仿冒IDIntelGFX设置为3E9B8086、ig-platform-id设置3E9B0007后，开机黑屏。（核心显卡正常驱动后DVI/HDMI没有输出）</li>
<li>注入不同显卡id，没用；修改机型为Macmini8.1，没用；FB打缓冲帧补丁，没用。。。。</li>
<li>最终，在网上找了一段plist设置代码，真神奇，竟然可以了！（当传家宝保存下来）</li>
</ul>
<h4 id="定制usb">定制USB：</h4>
<p>https://blog.csdn.net/LeoForBest/article/details/103247824</p>
<h4 id="声卡驱动">声卡驱动：</h4>
<p>查了声卡型号，ALC巴拉巴拉，网络上搜到的注入ID，好多好多，真的是改个数重启一下，重启了十来回，声卡注入“11”成功驱动。</p>
<h4 id="其他问题">其他问题：</h4>
<ol type="1">
<li>DVI转HDMI后屏幕发紫（RGB色彩空间问题）强制RGB
<ul>
<li>注入EDID</li>
</ul></li>
<li>无法开启HiDPI！设置1080p，字体模糊；设置高分辨率，不能全屏；HiDPI只能开启960x540。
<ul>
<li>换个显示器后效果变好了（同样1920*1080的屏幕，玄学）</li>
</ul></li>
</ol>
<h3 id="lenovo-thinkpad-centre-m8600t-6700h110">5. Lenovo ThinkPad Centre M8600t 6700+H110</h3>
<p>核显免驱！！！</p>
]]></content>
      <categories>
        <category>黑苹果</category>
      </categories>
      <tags>
        <tag>使用技巧</tag>
        <tag>黑苹果</tag>
      </tags>
  </entry>
  <entry>
    <title>联想Y50-70黑苹果安装总结</title>
    <url>/2021/06/29/%E9%BB%91%E8%8B%B9%E6%9E%9C/%E8%81%94%E6%83%B3Y50-70%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>联想Y50-70黑苹果安装总结</p>
<span id="more"></span>
<h2 id="一基本配置">一、基本配置</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">型号</th>
<th style="text-align: center;">联想 Y50-70AM-IFI</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">处理器</td>
<td style="text-align: center;">Intel Core i5-4200H(2.8GHz/L3 3M) Haswell架构</td>
</tr>
<tr class="even">
<td style="text-align: center;">内存</td>
<td style="text-align: center;">4GB DDR3L 1600MHz（自行安装一条三星DDR3L 1600MHz扩容至8GB）</td>
</tr>
<tr class="odd">
<td style="text-align: center;">硬盘</td>
<td style="text-align: center;">1TB HDD（自行更换三星860 EVO 500G固态硬盘）</td>
</tr>
<tr class="even">
<td style="text-align: center;">显卡</td>
<td style="text-align: center;">NVIDIA GeForce GTX 860M+Intel HD 4600（BIOS中屏蔽独显）</td>
</tr>
<tr class="odd">
<td style="text-align: center;">USB</td>
<td style="text-align: center;">1xUSB2.0+2xUSB3.0</td>
</tr>
<tr class="even">
<td style="text-align: center;">其他接口</td>
<td style="text-align: center;">HDMI接口、3.5mm耳机...</td>
</tr>
</tbody>
</table>
<h2 id="二系统安装">二、系统安装</h2>
<h4 id="bios设置">BIOS设置：</h4>
<ul>
<li>UEFI boot —— enabled</li>
<li>secure boot —— disabled</li>
</ul>
<h4 id="镜像">镜像：</h4>
<p><a href="https://blog.daliansky.net">黑果小兵</a></p>
<h2 id="三驱动安装">三、驱动安装</h2>
<p>参考tonymacx86.com网站教程：[<a href="https://www.tonymacx86.com/threads/guide-lenovo-y50-uhd-or-1080p-using-clover-uefi.261723/">Guide] Lenovo Y50 (UHD or 1080p) using Clover UEFI</a></p>
<h2 id="四常见问题">四、常见问题</h2>
<h4 id="八苹果花屏">1. 八苹果花屏</h4>
<p><strong>解决方法：</strong>BIOS里设置Legacy Boot (but UEFI first) —— enabled</p>
<h4 id="无法直接开机需要进一次windows系统重启才能进入黑苹果-启动系统没有声音">2. 无法直接开机，需要进一次Windows系统重启才能进入黑苹果 | 启动系统没有声音</h4>
<p><strong>解决方法：</strong>启动参数加入<code>slide=0</code></p>
]]></content>
      <categories>
        <category>黑苹果</category>
      </categories>
      <tags>
        <tag>使用技巧</tag>
        <tag>黑苹果</tag>
      </tags>
  </entry>
</search>
